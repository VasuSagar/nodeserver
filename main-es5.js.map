{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/addfinal/addfinal.component.ts","webpack:///src/app/components/addfinal/addfinal.component.html","webpack:///src/app/components/addmat/addmat.component.ts","webpack:///src/app/components/addmat/addmat.component.html","webpack:///src/app/components/addprescription/addprescription.component.ts","webpack:///src/app/components/addprescription/addprescription.component.html","webpack:///src/app/components/blog/blog.component.ts","webpack:///src/app/components/blog/blog.component.html","webpack:///src/app/components/blog/delblog/delblog.component.ts","webpack:///src/app/components/blog/delblog/delblog.component.html","webpack:///src/app/components/blog/editblog/editblog.component.ts","webpack:///src/app/components/blog/editblog/editblog.component.html","webpack:///src/app/components/changemate/changemate.component.ts","webpack:///src/app/components/changemate/changemate.component.html","webpack:///src/app/components/changeprice/changeprice.component.ts","webpack:///src/app/components/changeprice/changeprice.component.html","webpack:///src/app/components/checkoutprescription/checkoutprescription.component.ts","webpack:///src/app/components/checkoutprescription/checkoutprescription.component.html","webpack:///src/app/components/dashboard/dashboard.component.ts","webpack:///src/app/components/dashboard/dashboard.component.html","webpack:///src/app/components/disease/disease.component.ts","webpack:///src/app/components/disease/disease.component.html","webpack:///src/app/components/drug/drug.component.ts","webpack:///src/app/components/drug/drug.component.html","webpack:///src/app/components/encyclo/encyclo.component.ts","webpack:///src/app/components/encyclo/encyclo.component.html","webpack:///src/app/components/graph/graph.component.ts","webpack:///src/app/components/graph/graph.component.html","webpack:///src/app/components/graph2/graph2.component.ts","webpack:///src/app/components/graph2/graph2.component.html","webpack:///src/app/components/home/home.component.ts","webpack:///src/app/components/home/home.component.html","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/components/loginchemist/loginchemist.component.ts","webpack:///src/app/components/loginchemist/loginchemist.component.html","webpack:///src/app/components/logindoctor/logindoctor.component.ts","webpack:///src/app/components/logindoctor/logindoctor.component.html","webpack:///src/app/components/navbar/navbar.component.ts","webpack:///src/app/components/navbar/navbar.component.html","webpack:///src/app/components/pdf/pdf.component.ts","webpack:///src/app/components/pdf/pdf.component.html","webpack:///src/app/components/profile/profile.component.ts","webpack:///src/app/components/profile/profile.component.html","webpack:///src/app/components/publicprof/publicprof.component.ts","webpack:///src/app/components/publicprof/publicprof.component.html","webpack:///src/app/components/register/register.component.ts","webpack:///src/app/components/register/register.component.html","webpack:///src/app/components/registerchemist/registerchemist.component.ts","webpack:///src/app/components/registerchemist/registerchemist.component.html","webpack:///src/app/components/registerdoctor/registerdoctor.component.ts","webpack:///src/app/components/registerdoctor/registerdoctor.component.html","webpack:///src/app/components/viewfull/viewfull.component.ts","webpack:///src/app/components/viewfull/viewfull.component.html","webpack:///src/app/components/viewpreforpatient/viewpreforpatient.component.ts","webpack:///src/app/components/viewpreforpatient/viewpreforpatient.component.html","webpack:///src/app/components/viewprescription/viewprescription.component.ts","webpack:///src/app/components/viewprescription/viewprescription.component.html","webpack:///src/app/dialog/add/add.component.ts","webpack:///src/app/dialog/add/add.component.html","webpack:///src/app/dialog/delete/delete.component.ts","webpack:///src/app/dialog/delete/delete.component.html","webpack:///src/app/dialog/edit/edit.component.ts","webpack:///src/app/dialog/edit/edit.component.html","webpack:///src/app/guard/auth.guard.ts","webpack:///src/app/guard/authchemist.gard.ts","webpack:///src/app/guard/authdoctor.guard.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/blogservice.service.ts","webpack:///src/app/services/emp.service.ts","webpack:///src/app/services/glob.ts","webpack:///src/app/services/transfer.service.ts","webpack:///src/app/services/validate.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","toastr","title","selector","templateUrl","styleUrls","appRoutes","path","component","canActivate","AppModule","declarations","providers","bootstrap","AddfinalComponent","_formBuilder","authService","myControl","myControl2","displayedColumns","getDoctordisname","subscribe","disease","options","filteredOptions","valueChanges","pipe","value","_filter","getDoctordisid","did","obj","console","log","filterValue","toLowerCase","filter","option","includes","options2","option2","JSON","stringify","varr","varr1","op","x","finddiseaseid","getDoctormed","prescription","filteredOptions2","_filter2","dname","submit","ELEMENT_DATA","AddmatComponent","router","flashMessage","presc","medname","breakfast","lunch","quantity","dataSource","getDoctordAllmed","push","digits","OTP","i","Math","floor","random","username","otp","generateOTP","Number","addPrescription2","data","success","show","cssClass","timeout","navigate","addNew","submitPrescription","AddprescriptionComponent","fieldArray","newAttribute","selectedDisease","selectedMedicine","medicines","index","splice","disease_id","getMedicines","item","name","medicine","addPrescription","addFieldValue","BlogComponent","formBuilder","blogService","newPost","loadingBlogs","processing","newComment","enabledComments","createNewBlogForm","createCommentForm","form","group","compose","required","maxLength","minLength","alphaNumericValidation","body","commentForm","comment","get","enable","disable","controls","regExp","RegExp","test","getAllBlogs","setTimeout","reset","indexOf","enableCommentForm","disableFormNewBlogForm","blog","createdBy","newBlog","messageClass","message","enableFormNewBlogForm","window","location","reload","getProfileDoctor","profile","user","uid","_id","blogPosts","blogs","likeBlog","dislikeBlog","disableCommentForm","postComment","expand","DelblogComponent","activatedRoute","foundBlog","currentUrl","snapshot","params","getSingleBlog","createdAt","deleteBlog","EditblogComponent","loading","editBlog","back","ChangemateComponent","dialog","dataService","httpClient","loadData","trim","dialogRef","open","issue","medicineprice","afterClosed","result","exampleDatabase","dataChange","getDialogData","refreshTable","price","foundIndex","findIndex","paginator","_changePageSize","pageSize","ExampleDataSource","sort","nativeElement","_exampleDatabase","_paginator","_sort","_filterChange","filteredData","renderedData","pageIndex","displayDataChanges","sortChange","page","getAllIssues","slice","searchStr","sortedData","sortData","startIndex","active","direction","a","b","propertyA","propertyB","valueA","isNaN","valueB","next","ChangepriceComponent","showMedicine","editRowId","temp","viewAllMedicinePrice","val","length","saveeditedmed","Add","CheckoutprescriptionComponent","transferService","total","getData","mediname","quant","viewMedicinePrice","updateQuantity","doc","specialElementHandlers","element","renderer","content","fromHTML","innerHTML","save","updatequant","downloadpdf","goBack","DashboardComponent","DiseaseComponent","desc","symp","tre","cause","registerDisease","Submit","DrugComponent","drug","mname","uses","pre","registerDrug","EncycloComponent","viewDrugs","viewDiseases","drugload","diseaseload","GraphComponent","apidata","getgraph","Highcharts","chartOptions","chart","plotBackgroundColor","plotBorderWidth","plotShadow","type","text","tooltip","pointFormat","accessibility","point","valueSuffix","plotOptions","pie","allowPointSelect","cursor","dataLabels","enabled","format","series","colorByPoint","Graph2Component","ob","axis","getgraph2","subtitle","xAxis","categories","showInLegend","HomeComponent","LoginComponent","globals","email","password","authenticateUser","storeUserData","token","set","msg","onLoginSubmit","LoginchemistComponent","authenticateChemist","storeChemistData","uname","LogindoctorComponent","authenticateDoctor","storeDoctorData","NavbarComponent","logout","PdfComponent","ProfileComponent","err","PublicprofComponent","foundProfile","getProfileDoctorbyname","RegisterComponent","ValidateService","validateRegister","validateEmail","registerUser","onRegisterSubmit","RegisterchemistComponent","registerChemist","RegisterdoctorComponent","registerDoctor","ViewfullComponent","ViewpreforpatientComponent","viewPrescriptionpat","setData","ViewprescriptionComponent","viewPrescription","AddComponent","formControl","hasError","close","addIssue","confirmAdd","onNoClick","DeleteComponent","deleteIssue","confirmDelete","EditComponent","empService","updateIssue","stopEdit","AuthGuard","loggedIn","AuthGuardChemist","loggedInChemist","AuthGuardDoctor","loggedInDoctor","AuthService","http","headers","append","post","map","res","json","loadToken","authToken","loadTokenChemist","loadTokenDoctor","localStorage","setItem","getItem","clear","prescirption","medobj","createAuthenticationHeaders","providedIn","BlogserviceService","domain","put","EmpService","error","dialogData","warning","Globals","TransferService","clearData","undefined","re","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'FirstApp';\n  constructor(private toastr: ToastrService) { }\n}\n","<app-navbar></app-navbar>\r\n\r\n<div class=\"container\">\r\n    <flash-messages></flash-messages>\r\n    <router-outlet></router-outlet>\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport{RouterModule,Routes} from '@angular/router';\nimport {FormsModule} from '@angular/forms';\nimport {HttpModule} from '@angular/http';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { RegisterComponent } from './components/register/register.component';\n\n\nimport {ValidateService} from './services/validate.service';\nimport {AuthService} from './services/auth.service';\nimport {FlashMessagesModule} from 'angular2-flash-messages';\nimport {AuthGuard} from './guard/auth.guard';\nimport {AuthGuardChemist} from './guard/authchemist.gard'; //guard for chemist\n\nimport { LogindoctorComponent } from './components/logindoctor/logindoctor.component';\nimport { LoginchemistComponent } from './components/loginchemist/loginchemist.component';\nimport { RegisterdoctorComponent } from './components/registerdoctor/registerdoctor.component';\nimport { RegisterchemistComponent } from './components/registerchemist/registerchemist.component';\nimport { AddprescriptionComponent } from './components/addprescription/addprescription.component';\n\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ViewprescriptionComponent } from './components/viewprescription/viewprescription.component';\nimport { CheckoutprescriptionComponent } from './components/checkoutprescription/checkoutprescription.component';\nimport { PdfComponent } from './components/pdf/pdf.component';\nimport { AuthGuardDoctor } from './guard/authdoctor.guard';\nimport { EncycloComponent } from './components/encyclo/encyclo.component';\nimport { DrugComponent } from './components/drug/drug.component';\nimport { DiseaseComponent } from './components/disease/disease.component';\nimport { ChangepriceComponent } from './components/changeprice/changeprice.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'; //guard for doctor\n\nimport { MatTableModule } from '@angular/material/table';\nimport { ChangemateComponent } from './components/changemate/changemate.component';\nimport {MatSortModule} from '@angular/material/sort';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatDialogModule} from '@angular/material/dialog';\n\n//autoinput\nimport{MatAutocompleteModule} from '@angular/material/autocomplete';\nimport{MatFormFieldModule} from '@angular/material/form-field';\nimport{MatInputModule} from '@angular/material/input';\nimport { EmpService } from './services/emp.service';\nimport{MatIconModule} from '@angular/material/icon';\nimport { EditComponent } from './dialog/edit/edit.component';\nimport { ToastrModule } from 'ngx-toastr';\nimport { AddComponent } from './dialog/add/add.component';\nimport { DeleteComponent } from './dialog/delete/delete.component';\nimport { BlogComponent } from './components/blog/blog.component';\nimport { EditblogComponent } from './components/blog/editblog/editblog.component';\nimport { DelblogComponent } from './components/blog/delblog/delblog.component';\nimport { PublicprofComponent } from './components/publicprof/publicprof.component';\nimport { ViewpreforpatientComponent } from './components/viewpreforpatient/viewpreforpatient.component';\nimport {Globals} from './services/glob';\nimport { AddmatComponent } from './components/addmat/addmat.component';\nimport { AddfinalComponent } from './components/addfinal/addfinal.component';\nimport { GraphComponent } from './components/graph/graph.component';\nimport { HighchartsChartModule } from 'highcharts-angular';\nimport { Graph2Component } from './components/graph2/graph2.component';\nimport { ViewfullComponent } from './components/viewfull/viewfull.component';\nconst appRoutes:Routes=[\n  {path:\"\",component:HomeComponent},\n  {path:\"register\",component:RegisterComponent},\n  {path:\"registerchemist\",component:RegisterchemistComponent},\n  {path:\"registerdoctor\",component:RegisterdoctorComponent},\n  {path:\"login\",component:LoginComponent},\n  {path:\"logindoctor\",component:LogindoctorComponent},//login for doctor\n  {path:\"loginchemist\",component:LoginchemistComponent},  //login for chemist\n  {path:\"dashboard\",component:DashboardComponent,canActivate:[AuthGuardDoctor]},\n  //{path:\"profile\",component:ProfileComponent,canActivate:[AuthGuard]},\n  //{path:\"profile\",component:ProfileComponent,canActivate:[AuthGuardChemist]},\n  {path:\"profile\",component:ProfileComponent,canActivate:[AuthGuardDoctor]},\n  {path:\"addprescription\",component:AddprescriptionComponent,canActivate:[AuthGuardChemist]},\n  {path:\"checkoutprescription\",component:CheckoutprescriptionComponent,canActivate:[AuthGuardChemist]},\n  {path:\"viewprescription\",component:ViewprescriptionComponent,canActivate:[AuthGuardChemist]},\n  {path:\"pdfcomponent\",component:PdfComponent,canActivate:[AuthGuardChemist]},\n  {path:\"encyclo\",component:EncycloComponent,canActivate:[AuthGuardDoctor]},\n  {path:\"drug\",component:DrugComponent,canActivate:[AuthGuardDoctor]},\n  {path:\"disease\",component:DiseaseComponent,canActivate:[AuthGuardDoctor]},\n  {path:\"changeprice\",component:ChangepriceComponent,canActivate:[AuthGuardChemist]},\n  {path:\"changemate\",component:ChangemateComponent,canActivate:[AuthGuardChemist]},\n  {path:\"blog\",component:BlogComponent,canActivate:[AuthGuardDoctor]},\n  {path:\"edit-blog/:id\",component:EditblogComponent,canActivate:[AuthGuardDoctor]},\n  {path:\"delete-blog/:id\",component:DelblogComponent,canActivate:[AuthGuardDoctor]},\n  {path:\"user/:username\",component:PublicprofComponent,canActivate:[AuthGuardDoctor]},\n  {path:\"viewprescriptionpat\",component:ViewpreforpatientComponent,canActivate:[AuthGuard]},\n  {path:\"addprescriptionmat\",component:AddmatComponent,canActivate:[AuthGuardDoctor]},\n  {path:\"addfinal\",component:AddfinalComponent,canActivate:[AuthGuardChemist]},\n  {path:\"graph\",component:GraphComponent,canActivate:[AuthGuardChemist]},\n  {path:\"viewfull\",component:ViewfullComponent,canActivate:[AuthGuard]}\n\n]\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LoginComponent,\n    HomeComponent,\n    \n    DashboardComponent,\n    ProfileComponent,\n    RegisterComponent,\n    LogindoctorComponent,\n    LoginchemistComponent,\n    RegisterdoctorComponent,\n    RegisterchemistComponent,\n    AddprescriptionComponent,\n    ViewprescriptionComponent,\n    CheckoutprescriptionComponent,\n    PdfComponent,\n    EncycloComponent,\n    DrugComponent,\n    DiseaseComponent,\n    ChangepriceComponent,\n    ChangemateComponent,\n    EditComponent,\n    AddComponent,\n    DeleteComponent,\n    BlogComponent,\n    EditblogComponent,\n    DelblogComponent,\n    PublicprofComponent,\n    ViewpreforpatientComponent,\n    AddmatComponent,\n    AddfinalComponent,\n    GraphComponent,\n    Graph2Component,\n    ViewfullComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpModule,\n    RouterModule.forRoot(appRoutes),\n    FlashMessagesModule.forRoot(),\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatAutocompleteModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatDialogModule,\n    HttpClientModule,\n    ToastrModule.forRoot(),\n    HighchartsChartModule\n\n\n  ],\n  providers: [ValidateService,AuthService,AuthGuard,AuthGuardChemist,AuthGuardDoctor,EmpService,Globals],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","\nimport { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {startWith, map, find} from 'rxjs/operators';\nimport {FormControl} from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { DiseaseComponent } from '../disease/disease.component';\nimport { DataSource } from '@angular/cdk/collections';\n@Component({\n  selector: 'app-addfinal',\n  templateUrl: './addfinal.component.html',\n  styleUrls: ['./addfinal.component.css']\n})\nexport class AddfinalComponent implements OnInit {\n  myControl = new FormControl();\n  myControl2 = new FormControl();\n\n  //options: string[] = ['One', 'Two', 'Three'];\n  options: string[];\n  //options2: string[] = ['1', '2', '3','11','22','33'];\n  options2:string[];\n  obj:Disease;\n  filteredOptions: Observable<string[]>;\n  filteredOptions2: Observable<string[]>;\n  \n  varr;\n  varr1;\n  //below is tmep\n  displayedColumns: string[] = ['medname', 'breakfast','lunch'];\n\n  constructor(private _formBuilder: FormBuilder, private authService:AuthService) { }\n\n  ngOnInit(): void {\n\n\n   this.authService.getDoctordisname().subscribe(disease=>{\n     \n     \n      this.options=disease;\n      this.filteredOptions = this.myControl.valueChanges\n      .pipe(\n        startWith(''),\n        map(value => this._filter(value))\n      );\n\n  });\n\n  this.authService.getDoctordisid().subscribe(did=>{\n    this.obj=did;\n    console.log(this.obj);\n  });\n\n\n   \n    \n    \n  }\n\n\n \n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\n  }\n  private _filter2(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.options2.filter(option2 => option2.toLowerCase().includes(filterValue));\n  }\n\n \n\n\n  submit()\n  {\n    //console.log(this.options[i]);\n   // console.log(\"hi\");\n    console.log(JSON.stringify(this.varr));\n    console.log(JSON.stringify(this.varr1));\n   //console.log(form.value);\n  }\n\n\n  oncg(op)\n  {var x;\n   //console.log(op); //here we got the name of disease.Now we will find it's id from obj\n   //console.log(\"ID IS\"+this.finddiseaseid(op));\n    const obj={did:this.finddiseaseid(op)};\n    \n    this.authService.getDoctormed(obj).subscribe(prescription=>{\n     this.options2=prescription;\n     this.filteredOptions2 = this.myControl2.valueChanges\n     .pipe(\n       startWith(''),\n       map(value => this._filter2(value))\n     );\n      \n      \n    });\n    \n  }\n\n  finddiseaseid(dname){        //this function will find disease's id\n    var x;\n    for(x in this.obj){\n      if(this.obj[x].dname==dname)\n        return this.obj[x].did; \n    }\n  }\n\n  addNew()\n  {\n\n  }\n  \n\n\n\n}\ninterface Disease{\n  dname:string,\n\n  did:string\n  \n  }\n\n\n","<form class=\"example-form\" (ngSubmit)=\"submit()\">\n \n    <mat-form-field class=\"example-full-width\">\n      <input type=\"text\"\n             placeholder=\"Select Disease\"\n             aria-label=\"Number\"\n             matInput\n             [formControl]=\"myControl\"\n             [matAutocomplete]=\"auto\"\n             [(ngModel)]=\"varr\" name=\"varr\" id=\"varr\" >\n      <mat-autocomplete #auto=\"matAutocomplete\">\n        <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\" (click)=\"oncg(option)\" >\n          {{option}}\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n      <br><br><br><br> <br><br><br><br> <br><br><br><br> <br><br><br><br>\n  \n      <mat-form-field class=\"example-full-width\">\n    <input type=\"text\"\n             placeholder=\"Select Medicines\"\n             aria-label=\"Numberr\"\n             matInput\n             [formControl]=\"myControl2\"\n             [matAutocomplete]=\"autotest\"\n             [(ngModel)]=\"varr1\" name=\"varr1\" id=\"varr1\"\n             >\n      <mat-autocomplete #autotest=\"matAutocomplete\">\n        <mat-option *ngFor=\"let option1 of filteredOptions2 | async\" [value]=\"option1\" >\n          {{option1}}\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n  \n    <input type=\"submit\" value=\"Register\">\n  \n  \n  </form>\n  \n  <!--\n  <div *ngFor=\"let name of options2\">\n    {{name}}\n  </div>\n  -->\n  \n  <br><br><br><br>\n  \n","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {startWith, map, find} from 'rxjs/operators';\nimport {FormControl} from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { DiseaseComponent } from '../disease/disease.component';\nimport { DataSource } from '@angular/cdk/collections';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {Router} from '@angular/router';\nimport {FlashMessagesService} from 'angular2-flash-messages';\n const ELEMENT_DATA: Prescription[] = [\n   //{medname: 'botyle', breakfast :\"1\",lunch:\"0\"},\n\n ];\n@Component({\n  selector: 'app-addmat',\n  templateUrl: './addmat.component.html',\n  styleUrls: ['./addmat.component.css']\n})\nexport class AddmatComponent implements OnInit {\n  username:any;\n  //here to\n\n  presc : Prescription = {\n    medname :\"\",\n    breakfast :\"\",\n    lunch :\"\",\n    quantity:0\n  };\n\n  //here temp\n\n\n\n  myControl = new FormControl();\n  myControl2 = new FormControl();\n\n  //options: string[] = ['One', 'Two', 'Three'];\n  options: string[];\n  //options2: string[] = ['1', '2', '3','11','22','33'];\n  options2:string[];\n  obj:Disease;\n  filteredOptions: Observable<string[]>;\n  filteredOptions2: Observable<string[]>;\n  \n  varr;\n  varr1;\n  //below is tmep\n  displayedColumns: string[] = ['medname', 'breakfast','lunch','quantity'];\n  dataSource = new MatTableDataSource(ELEMENT_DATA);\n  \n\n  constructor(private _formBuilder: FormBuilder, private authService:AuthService,\n    private router:Router,\n    private flashMessage:FlashMessagesService) { }\n\n  ngOnInit(): void {\n\n\n   this.authService.getDoctordisname().subscribe(disease=>{\n     \n     \n      this.options=disease;\n      this.filteredOptions = this.myControl.valueChanges\n      .pipe(\n        startWith(''),\n        map(value => this._filter(value))\n      );\n\n     \n      \n\n  });\n  this.authService.getDoctordAllmed().subscribe(prescription=>{\n    this.options2=prescription;\n    this.filteredOptions2 = this.myControl2.valueChanges\n    .pipe(\n      startWith(''),\n      map(value => this._filter2(value))\n    );\n     \n     \n   });\n\n  this.authService.getDoctordisid().subscribe(did=>{\n    this.obj=did;\n    console.log(this.obj);\n  });\n\n\n\n    \n    \n  }\n\n\n \n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\n  }\n  private _filter2(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.options2.filter(option2 => option2.toLowerCase().includes(filterValue));\n  }\n\n \n\n\n  submit()\n  {\n    //console.log(this.options[i]);\n   // console.log(\"hi\");\n    console.log(JSON.stringify(this.varr));\n    console.log(JSON.stringify(this.varr1));\n   //console.log(form.value);\n  }\n\n\n  oncg(op)\n  {var x;\n   //console.log(op); //here we got the name of disease.Now we will find it's id from obj\n   //console.log(\"ID IS\"+this.finddiseaseid(op));\n    const obj={did:this.finddiseaseid(op)};\n    \n    this.authService.getDoctormed(obj).subscribe(prescription=>{\n     this.options2=prescription;\n     this.filteredOptions2 = this.myControl2.valueChanges\n     .pipe(\n       startWith(''),\n       map(value => this._filter2(value))\n     );\n      \n      \n    });\n    \n  }\n\n  finddiseaseid(dname){        //this function will find disease's id\n    var x;\n    for(x in this.obj){\n      if(this.obj[x].dname==dname)\n        return this.obj[x].did; \n    }\n  }\n\n  addNew()\n  {\n    ELEMENT_DATA.push(this.presc)\n    \n    this.dataSource = new MatTableDataSource(ELEMENT_DATA);\n    this.presc = {\n      medname :\"\",\n      breakfast :\"\",\n      lunch :\"\",\n      quantity:0\n   };\n   \n\n  }\n  generateOTP() { \n          \n    // Declare a digits variable  \n    // which stores all digits \n    var digits = '0123456789'; \n    let OTP = ''; \n    for (let i = 0; i < 6; i++ ) { \n        OTP += digits[Math.floor(Math.random() * 10)]; \n    } \n    return OTP;\n} \n\n\nsubmitPrescription()\n      {\n        var x;\n        const presc={\n                \n        medname:[],\n        breakfast:[],\n          lunch:[],\n          quantity:[],\n          username:this.username,\n          otp:this.generateOTP()\n      }\n\n      for(x in ELEMENT_DATA){\n        presc.medname[x]=ELEMENT_DATA[x].medname;\n        presc.breakfast[x]=ELEMENT_DATA[x].breakfast;\n        presc.lunch[x]=ELEMENT_DATA[x].lunch;\n        presc.quantity[x]=Number(ELEMENT_DATA[x].quantity);\n      \n      }\n\n  this.authService.addPrescription2(presc).subscribe(data=>{\n    if(data.success){\n        \n\n\n         //after inserting prescription to database\n         this.flashMessage.show(\"Prescription successfully submitted\",{cssClass:'alert-success',timeout:5000});\n         this.router.navigate(['dashboard']);\n     \n    }\n    else{\n      this.flashMessage.show(\"Invalid Username\",{cssClass:'alert-danger',timeout:5000});\n     \n\n    }\n  });\n}\n\n\n\n}\ninterface Disease{\n  dname:string,\n\n  did:string\n  \n  }\n\n  interface Prescription{\n    medname:string,\n    breakfast:string,\n    lunch:string,\n    quantity:number\n    \n    }\n\n\n","Patient Username:<input class=\"form-control\" type=\"text\" id=\"username\" [(ngModel)]=\"username\" name=\"username\" />\n<br><br>\n \n  <mat-form-field class=\"example-full-width\">\n    <input type=\"text\"\n           placeholder=\"Select Disease\"\n           aria-label=\"Number\"\n           matInput\n           [formControl]=\"myControl\"\n           [matAutocomplete]=\"auto\"\n           [(ngModel)]=\"varr\" name=\"varr\" id=\"varr\" >\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\" (click)=\"oncg(option)\" >\n        {{option}}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n    <br><br><br>\n\n    <!-- <mat-form-field class=\"example-full-width\">\n  <input type=\"text\"\n           placeholder=\"Select Medicines\"\n           aria-label=\"Numberr\"\n           matInput\n           [formControl]=\"myControl2\"\n           [matAutocomplete]=\"autotest\"\n           [(ngModel)]=\"varr1\" name=\"varr1\" id=\"varr1\"\n           >\n    <mat-autocomplete #autotest=\"matAutocomplete\">\n      <mat-option *ngFor=\"let option1 of filteredOptions2 | async\" [value]=\"option1\" >\n        {{option1}}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n\n  <input type=\"submit\" value=\"Register\"> -->\n\n  <!-- <mat-form-field >\n    <input matInput placeholder=\"Medicine Name\" [(ngModel)]=\"presc.medname\">\n  </mat-form-field>&nbsp; -->\n\n  <mat-form-field class=\"example-full-width\">\n    <input type=\"text\"\n             placeholder=\"Select Medicines\"\n             aria-label=\"Numberr\"\n             matInput\n             [formControl]=\"myControl2\"\n             [matAutocomplete]=\"autotest\"\n             [(ngModel)]=\"presc.medname\" name=\"presc.medname\" id=\"presc.medname\"\n             >\n      <mat-autocomplete #autotest=\"matAutocomplete\">\n        <mat-option *ngFor=\"let option1 of filteredOptions2 | async\" [value]=\"option1\" >\n          {{option1}}\n        </mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n\n\n\n  <mat-form-field>\n    <input matInput placeholder=\"Breakfast\" [(ngModel)]=\"presc.breakfast\">\n  </mat-form-field>&nbsp;\n  <mat-form-field>\n    <input matInput placeholder=\"Lunch\" [(ngModel)]=\"presc.lunch\">\n  </mat-form-field>&nbsp;\n  <mat-form-field>\n    <input matInput placeholder=\"Quantity\" [(ngModel)]=\"presc.quantity\">\n  </mat-form-field>&nbsp;\n  <br>\n  <button mat-raised-button color=\"primary\" (click)=\"addNew()\">Save</button>\n  <br><br>\n  <table mat-table [dataSource]=\"dataSource\" matSort class=\"mat-elevation-z8\">\n\n    <!--- Note that these columns can be defined in any order.\n          The actual rendered columns are set as a property on the row definition\" -->\n  \n    <!-- Position Column -->\n    <ng-container matColumnDef=\"medname\">\n      <th mat-header-cell mat-sort-header *matHeaderCellDef> Medicine name </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.medname}} </td>\n    </ng-container>\n  \n    <!-- Name Column -->\n    <ng-container matColumnDef=\"breakfast\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Breakfast </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.breakfast}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"lunch\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Lunch </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.lunch}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"quantity\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Quantity </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.quantity}} </td>\n      </ng-container>\n\n\n \n    \n  \n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>  \n\n\n  <button class=\"btn btn-default\" type=\"button\" (click)=\"submitPrescription()\">Submit Prescription</button>","import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {FlashMessagesService} from 'angular2-flash-messages';\nimport { AuthService } from 'src/app/services/auth.service';\n@Component({\n  selector: 'app-addprescription',\n  templateUrl: './addprescription.component.html',\n  styleUrls: ['./addprescription.component.css']\n})\nexport class AddprescriptionComponent implements OnInit {\n  public fieldArray: Array<any> = [];\n  public newAttribute: any = {};\n  username:any;\n  disease:any;\n\n  //another\n  selectedDisease = 0;\nselectedMedicine = 0;\n\nmedicines = [];\n\n\n  //for prescirption\n  medname:Array<number>;\n  breakfast:Array<string>;\n  lunch:Array<string>;\n\n\n      \n  constructor(private router:Router,\n    private authService:AuthService,\n    private flashMessage:FlashMessagesService) { }\n\n  ngOnInit(): void {\n  }\n  \n  addFieldValue() {\n    this.fieldArray.push(this.newAttribute)\n    this.newAttribute = {};\n    \n\n\n}\n\ndeleteFieldValue(index) {\n    this.fieldArray.splice(index, 1);\n    console.log(this.fieldArray);       //to get breakfast of first row we will typ=>>>> this.fieldArray[0].breakfast\n}\n\n\n\n//another\nonSelectDisease(disease_id: number) {\n    this.selectedDisease = disease_id;\n    this.selectedMedicine = 0;\n    \n    this.medicines = this.getMedicines().filter((item) => {\n    return item.disease_id === Number(disease_id)\n    });\n    }\n\n\n    \n       \n      getDiseases() {\n      return [\n      { id: 1, name: 'Maleriya' },\n      { id: 2, name: 'Fever' },\n      { id: 3, name: 'Typhoid' }\n      ];\n      }\n       \n      getMedicines() {\n      return [\n      { id: 1, disease_id: 1, name: 'Botyle' },\n      { id: 2, disease_id: 1, name: 'Isofenyle' },\n      { id: 3, disease_id: 1, name: 'Propyle' },\n      { id: 4, disease_id: 2, name: 'Crocine' },\n      { id: 5, disease_id: 2, name: 'Dispereine' },\n      { id: 6, disease_id: 3, name: 'Penicilin' },\n      ]\n      }\n\n\n      submitPrescription(){\n        var x;\n      \n\n\n\n\n\n\n\n\n\n\n\n        const presc={\n          \n          medname:[],\n           breakfast:[],\n             lunch:[],\n            username:this.username,\n            otp:this.generateOTP()\n        }\n\n        for(x in this.fieldArray){\n            presc.medname[x]=this.fieldArray[x].medicine;\n            presc.breakfast[x]=this.fieldArray[x].breakfast;\n            presc.lunch[x]=this.fieldArray[x].lunch;\n          \n          }\n\n          //send otp to registered email of user\n          \n      \n\n            \n\n          this.authService.addPrescription(presc).subscribe(data=>{\n            if(data.success){\n                \n\n\n                //after inserting prescription to database\n              this.flashMessage.show(\"Prescription successfully submitted\",{cssClass:'alert-success',timeout:5000});\n              this.router.navigate(['dashboard']);\n            }\n            else{\n              this.flashMessage.show(\"Invalid Username\",{cssClass:'alert-danger',timeout:5000});\n              this.router.navigate(['addprescription']);\n    \n            }\n          });\n \n\n        \n\n       \n\n\n      }\n\n      generateOTP() { \n          \n        // Declare a digits variable  \n        // which stores all digits \n        var digits = '0123456789'; \n        let OTP = ''; \n        for (let i = 0; i < 6; i++ ) { \n            OTP += digits[Math.floor(Math.random() * 10)]; \n        } \n        return OTP;\n    } \n      \n\n\n\n}\n","Patient Username:<input class=\"form-control\" type=\"text\" id=\"username\" [(ngModel)]=\"username\" name=\"username\" />\n<br><br>\n<div class=\"form-control\">\n  \n    <select *ngIf=\"getDiseases()\" [(ngModel)]=\"selectedDisease\" (change)=\"onSelectDisease($event.target.value)\" class=\"form-control\" id=\"disease\">\n    <option value=\"0\">Select Disease</option>\n    <option *ngFor=\"let disease of getDiseases()\" value= {{disease.id}}>{{disease.name}}</option>\n    </select>\n    </div>\n<br><br>\n\n<table class=\"table table-striped table-bordered\">\n    <thead>\n        <tr>\n            <th>Medicine</th>\n            <th>Breakfast</th>\n            <th>Lunch</th>\n\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let field of fieldArray; let i = index\">\n            <td>\n\t\t\t\t\n\t\t\t<select *ngIf=\"medicines\" [(ngModel)]=\"field.medicine\" class=\"form-control\" name=\"{{field.medicine}}\">\n\t\t\t\t<option value=\"0\">Select Medicine</option>\n    \t\t\t\t<option *ngFor=\"let medicine of medicines\" value= {{medicine.name}}>{{medicine.name}}</option>\n\t\t\t</select>\n\n\n            </td>\n            <td>\n                <input [(ngModel)]=\"field.breakfast\" class=\"form-control\" type=\"text\" name=\"{{field.breakfast}}\" />\n            </td>\n            <td>\n                <input [(ngModel)]=\"field.lunch\" class=\"form-control\" type=\"text\" name=\"{{field.lunch}}\" />\n            </td>\n            <td>\n                <button class=\"btn btn-default\"  type=\"button\" (click)=\"deleteFieldValue(i)\">Delete</button>\n            </td>\n        </tr>\n        <tr>\n            <td>\n               \n\t\t\t\n\t\t\t\t<select *ngIf=\"medicines\" [(ngModel)]=\"newAttribute.medicine\" class=\"form-control\" id=\"newAttributeMedicine\" name=\"newAttributeMedicne\">\n\t\t\t\t\t<option value=\"0\">Select Medicine</option>\n    \t\t\t\t<option *ngFor=\"let medicine of medicines\" value= {{medicine.name}}>{{medicine.name}}</option>\n\t\t\t\t</select>\n\t\t\t</td>\n            <td>\n                <input class=\"form-control\" type=\"text\" id=\"newAttributeBreakfast\" [(ngModel)]=\"newAttribute.breakfast\" name=\"newAttributeBreakfast\" />\n            </td>\n            <td>\n                <input class=\"form-control\" type=\"text\" id=\"newAttributeLunch\" [(ngModel)]=\"newAttribute.lunch\" name=\"newAttributeLunch\" />\n            </td>\n            <td>\n                <button class=\"btn btn-default\" type=\"button\" (click)=\"addFieldValue()\">Add</button>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<button class=\"btn btn-default\" type=\"button\" (click)=\"submitPrescription()\">Submit Prescription</button>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport {AuthService} from '../../services/auth.service';\nimport { BlogserviceService } from '../../services/blogservice.service';\n@Component({\n  selector: 'app-blog',\n  templateUrl: './blog.component.html',\n  styleUrls: ['./blog.component.css']\n})\nexport class BlogComponent implements OnInit {\n  messageClass;\n  message;\n  newPost = false;\n  loadingBlogs = false;\n  form;\n  processing = false;\n  username;\n  blogPosts;\n  uid;\n  newComment = [];\n  enabledComments = [];\n  commentForm;\n  constructor(private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private blogService: BlogserviceService) {\n      this.createNewBlogForm();\n      this.createCommentForm(); // Create form for posting comments on a user's blog post\n     }\n     createNewBlogForm() {\n      this.form = this.formBuilder.group({\n        title: ['', Validators.compose([\n          Validators.required,\n          Validators.maxLength(50),\n          Validators.minLength(5),\n          this.alphaNumericValidation\n        ])],\n        body: ['', Validators.compose([\n          Validators.required,\n          Validators.maxLength(500),\n          Validators.minLength(5)\n        ])]\n      })\n    }\n\n\n     // Create form for posting comments\n  createCommentForm() {\n    this.commentForm = this.formBuilder.group({\n      comment: ['', Validators.compose([\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(200)\n      ])]\n    })\n  }\n\n  // Enable the comment form\n  enableCommentForm() {\n    this.commentForm.get('comment').enable(); // Enable comment field\n  }\n\n  // Disable the comment form\n  disableCommentForm() {\n    this.commentForm.get('comment').disable(); // Disable comment field\n  }\n\n\n\n      // Enable new blog form\n  enableFormNewBlogForm() {\n    this.form.get('title').enable(); // Enable title field\n    this.form.get('body').enable(); // Enable body field\n  }\n\n  // Disable new blog form\n  disableFormNewBlogForm() {\n    this.form.get('title').disable(); // Disable title field\n    this.form.get('body').disable(); // Disable body field\n  }\n\n  // Validation for title\n  alphaNumericValidation(controls) {\n    const regExp = new RegExp(/^[a-zA-Z0-9 ]+$/); // Regular expression to perform test\n    // Check if test returns false or true\n    if (regExp.test(controls.value)) {\n      return null; // Return valid\n    } else {\n      return { 'alphaNumericValidation': true } // Return error in validation\n    }\n  }\n\n  // Function to display new blog form\n  newBlogForm() {\n    this.newPost = true; // Show new blog form\n  }\n\n  // Reload blogs on current page\n  reloadBlogs() {\n    this.loadingBlogs = true; // Used to lock button\n    this.getAllBlogs();\n    // Get All Blogs\n    setTimeout(() => {\n      this.loadingBlogs = false; // Release button lock after four seconds\n    }, 4000);\n  }\n\n   // Function to post a new comment on blog post\n   draftComment(id) {\n    this.commentForm.reset(); // Reset the comment form each time users starts a new comment\n    this.newComment = []; // Clear array so only one post can be commented on at a time\n    this.newComment.push(id); // Add the post that is being commented on to the array\n  }\n\n  // Function to cancel new post transaction\n  cancelSubmission(id) {\n    const index = this.newComment.indexOf(id); // Check the index of the blog post in the array\n    this.newComment.splice(index, 1); // Remove the id from the array to cancel post submission\n    this.commentForm.reset(); // Reset  the form after cancellation\n    this.enableCommentForm(); // Enable the form after cancellation\n    this.processing = false; // Enable any buttons that were locked\n  }\n  onBlogSubmit() {\n    this.processing = true; // Disable submit button\n    this.disableFormNewBlogForm(); // Lock form\n\n    // Create blog object from form fields\n    const blog = {\n      title: this.form.get('title').value, // Title field\n      body: this.form.get('body').value, // Body field\n      createdBy: this.username // CreatedBy field\n    }\n\n    // Function to save blog into database\n    this.blogService.newBlog(blog).subscribe(data => {\n      // Check if blog was saved to database or not\n      if (!data.success) {\n        this.messageClass = 'alert alert-danger'; // Return error class\n        this.message = data.message; // Return error message\n        this.processing = false; // Enable submit button\n        this.enableFormNewBlogForm(); // Enable form\n      } else {\n        this.messageClass = 'alert alert-success'; // Return success class\n        this.message = data.message; // Return success message\n        this.getAllBlogs();\n        // Clear form data after two seconds\n        setTimeout(() => {\n          this.newPost = false; // Hide form\n          this.processing = false; // Enable submit button\n          this.message = false; // Erase error/success message\n          this.form.reset(); // Reset all form fields\n          this.enableFormNewBlogForm(); // Enable the form fields\n        }, 2000);\n      }\n    });\n  }\n\n  // Function to go back to previous page\n  goBack() {\n    window.location.reload(); // Clear all variable states\n  }\n  ngOnInit(): void {\n      // Get profile username on page load\n     \n      this.authService.getProfileDoctor().subscribe(profile => {\n       \n        this.username = profile.user.username;// Used when creating new blog posts and comments\n        this.uid=profile.user._id;\n      });\n      this.getAllBlogs();\n\n      \n  }\n\n  // Function to get all blogs from the database\n  getAllBlogs() {\n    \n    this.blogService.getAllBlogs().subscribe(data => {\n      this.blogPosts = data.blogs; // Assign array to use in HTML\n    });\n  }\n\n  // Function to like a blog post\n  likeBlog(id) {\n   \n    const data={id:id,username:this.username,uid:this.uid};\n    this.blogService.likeBlog(data).subscribe(data => {\n      this.getAllBlogs(); // Refresh blogs after like\n    });\n  }\n\n// Function to disliked a blog post\n  dislikeBlog(id) {\n  \n    const data={id:id,username:this.username,uid:this.uid};\n    this.blogService.dislikeBlog(data).subscribe(data => {\n      this.getAllBlogs(); // Refresh blogs after dislike\n    });\n  }\n\n  // Function to post a new comment\n  postComment(id) {\n    this.disableCommentForm(); // Disable form while saving comment to database\n    this.processing = true; // Lock buttons while saving comment to database\n    const comment = this.commentForm.get('comment').value; // Get the comment value to pass to service function\n    // Function to save the comment to the database\n    const data={id:id,comment:comment,uid:this.uid};\n    this.blogService.postComment(data).subscribe(data => {\n      console.log(\"vlog\");\n      this.getAllBlogs(); // Refresh all blogs to reflect the new comment\n      const index = this.newComment.indexOf(id); // Get the index of the blog id to remove from array\n      this.newComment.splice(index, 1); // Remove id from the array\n      this.enableCommentForm(); // Re-enable the form\n      this.commentForm.reset(); // Reset the comment form\n      this.processing = false; // Unlock buttons on comment form\n      if (this.enabledComments.indexOf(id) < 0) this.expand(id); // Expand comments for user on comment submission\n    });\n  }\n\n  // Expand the list of comments\n  expand(id) {\n    this.enabledComments.push(id); // Add the current blog post id to array\n  }\n\n  // Collapse the list of comments\n  collapse(id) {\n    const index = this.enabledComments.indexOf(id); // Get position of id in array\n    this.enabledComments.splice(index, 1); // Remove id from array\n  }\n\n}\n","<h1 class=\"page-header\">Blog Feed</h1>\n\n<!-- Custom Success/Error Message -->\n<div class=\"row show-hide-message\" *ngIf=\"message && newPost\">\n  <div [ngClass]=\"messageClass\">\n    {{ message }}\n  </div>\n</div>\n\n<!-- New Post Button -->\n<button type=\"button\" name=\"button\" class=\"btn btn-warning\" *ngIf=\"!newPost\" (click)=\"newBlogForm()\">New Post</button>\n\n<!-- Reload Button -->\n<button [disabled]=\"loadingBlogs\" type=\"button\" name=\"button\" class=\"btn btn-default\" *ngIf=\"!newPost\" (click)=\"reloadBlogs()\"><span class=\"glyphicon glyphicon-repeat\"></span>&nbsp;&nbsp;Reload</button>\n\n<br />\n<br />\n\n<!-- New Blog Form -->\n<form [formGroup]=\"form\" name=\"blogForm\" (submit)=\"onBlogSubmit()\" *ngIf=\"newPost\">\n  <!-- Title Input -->\n  <div class=\"form-group\">\n    <label for=\"title\">Title</label>\n    <div [ngClass]=\"{'has-success': form.controls.title.valid, 'has-error': form.controls.title.dirty && form.controls.title.errors}\">\n      <!-- Title Input -->\n      <input type=\"text\" name=\"title\" class=\"form-control\" placeholder=\"*Blog Title\" autocomplete=\"off\" formControlName=\"title\" />\n      <!-- Validation -->\n      <ul class=\"help-block\">\n        <li *ngIf=\"form.controls.title.dirty && form.controls.title.errors?.required\">This field is required.</li>\n        <li *ngIf=\"(form.controls.title.dirty && form.controls.title.errors?.minlength) || (form.controls.title.dirty && form.controls.title.errors?.maxlength)\">Max length: 50, Min length: 5</li>\n        <li *ngIf=\"form.controls.title.dirty && form.controls.title.errors?.alphaNumericValidation\">Must be a letter or number</li>\n      </ul>\n    </div>\n  </div>\n\n  <!-- Body Input -->\n  <div class=\"form-group\">\n    <label for=\"body\">Body</label>\n    <div [ngClass]=\"{'has-success': form.controls.body.valid, 'has-error': form.controls.body.dirty && form.controls.body.errors}\">\n      <!-- Body Input -->\n      <textarea name=\"body\" rows=\"8\" cols=\"80\" placeholder=\"*Body\" class=\"form-control\" formControlName=\"body\"></textarea>\n      <!-- Validation -->\n      <ul class=\"help-block\">\n        <li *ngIf=\"form.controls.body.dirty && form.controls.body.errors?.required\">This field is required.</li>\n        <li *ngIf=\"(form.controls.body.dirty && form.controls.body.errors?.minlength) || (form.controls.body.dirty && form.controls.body.errors?.maxlength)\">Max length: 500, Min length: 5</li>\n      </ul>\n    </div>\n  </div>\n\n  <!-- Go Back Button -->\n  <button [disabled]=\"processing\" type=\"button\" name=\"button\" (click)=\"goBack()\" class=\"btn btn-warning\">Go Back</button>\n  <!-- Submit Button -->\n  <button [disabled]=\"processing || !form.valid\" type=\"submit\" name=\"button\" class=\"btn btn-success\">Submit</button>\n\n</form>\n<!-- New Blog Form -->\n\n<!-- Panel Start -->\n<div *ngIf=\"!newPost\">\n  <!-- Panel Outer Layer -->\n  <div class=\"panel panel-primary\" *ngFor=\"let blog of blogPosts\">\n\n    <!-- Panel Title -->\n    <div class=\"panel-heading\">\n      <h3 class=\"panel-title\">{{ blog.title }}</h3>\n    </div>\n\n    <!-- Panel Body -->\n    <div class=\"panel-body\">\n      {{ blog.body }}\n    </div>\n\n    <!-- Panel Footer Start -->\n    <div class=\"panel-footer\">\n      <strong>Posted by: </strong>{{ blog.createdBy }}\n      <br />\n      <strong>Date: </strong>{{ blog.createdAt | date:'MMM dd, yyyy' }}\n      <br />\n      <div *ngIf=\"username === blog.createdBy\">\n        <strong>Likes: </strong>{{ blog.likes }}\n        <br />\n        <strong>Dislikes: </strong>{{ blog.dislikes }}\n      </div>\n\n      <!-- Edit Button -->\n      <a [routerLink]=\"['/edit-blog/', blog._id]\" *ngIf=\"username === blog.createdBy\"><button type=\"button\" name=\"button\" class=\"btn btn-sm btn-info\">Edit</button></a>\n      <!-- Delete Button -->\n      <a [routerLink]=\"['/delete-blog/', blog._id]\" *ngIf=\"username === blog.createdBy\"><button type=\"button\" name=\"button\" class=\"btn btn-sm btn-danger\">Delete</button></a>\n\n      <!-- Likes Dropdown  -->\n      <div class=\"dropdown\">\n        <!-- Like Button -->\n        <button [disabled]=\"blog.likedBy.indexOf(username) > -1\" type=\"button\" name=\"button\" class=\"btn btn-sm btn-success\" *ngIf=\"username !== blog.createdBy\" (click)=\"likeBlog(blog._id)\"><span class=\"glyphicon glyphicon-thumbs-up\">&nbsp;</span>Likes: {{ blog.likes }}</button>\n        <!-- Dropdown Menu Items -->\n        <div class=\"dropdown-content\">\n          <a [routerLink]=\"['/user/', liker]\" *ngFor=\"let liker of blog.likedBy\">{{ liker }}</a>\n        </div>\n      </div>\n\n      <!-- Dislikes Dropdown  -->\n      <div class=\"dropdown\">\n        <!-- Dislike Button -->\n        <button [disabled]=\"blog.dislikedBy.indexOf(username) > -1\" type=\"button\" name=\"button\" class=\"btn btn-sm btn-warning\" *ngIf=\"username !== blog.createdBy\" (click)=\"dislikeBlog(blog._id)\"><span class=\"glyphicon glyphicon-thumbs-down\">&nbsp;</span>Dislikes: {{ blog.dislikes }}</button>\n        <!-- Dropdown Menu Items -->\n        <div class=\"dropdown-content\">\n          <a [routerLink]=\"['/user/', disliker]\" *ngFor=\"let disliker of blog.dislikedBy\">{{ disliker }}</a>\n        </div>\n      </div>\n\n    </div>\n    <!-- Panel Footer End -->\n\n    <!-- Post Comment Box: Start -->\n    <ul class=\"list-group\">\n      <li class=\"list-group-item\">\n        <!-- Post Comment Button -->\n        <button type=\"button\" name=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"draftComment(blog._id)\" [disabled]=\"newComment.indexOf(blog._id) > -1\">Post Comment</button>\n        <br />\n        <br />\n        <div *ngIf=\"newComment.indexOf(blog._id) > -1\">\n\n          <!-- Form: Comment Form Start -->\n          <form [formGroup]=\"commentForm\">\n            <!-- Textarea Input -->\n            <textarea name=\"comment\" rows=\"10\" cols=\"30\" class=\"form-control\" formControlName=\"comment\"></textarea>\n            <!-- Validation -->\n            <div [ngClass]=\"{'has-success': !commentForm.controls.comment.errors && commentForm.controls.comment.dirty, 'has-error': commentForm.controls.comment.dirty && commentForm.controls.comment.errors}\">\n              <ul class=\"help-block\">\n                <li *ngIf=\"commentForm.controls.comment.errors?.required && commentForm.controls.comment.dirty\">This field is required.</li>\n                <li *ngIf=\"(commentForm.controls.comment.errors?.maxlength && commentForm.controls.comment.dirty) ||(commentForm.controls.comment.errors?.minlength && commentForm.controls.comment.dirty)\">Comment must be at least 1 character but no more than 200.</li>\n              </ul>\n            </div>\n            <!-- Post Button -->\n            <button [disabled]=\"!commentForm.valid || processing\" type=\"submit\" name=\"button\" class=\"btn btn-sm btn-info\" (click)=\"postComment(blog._id)\">Post</button>\n            <!-- Cancel Button -->\n            <button [disabled]=\"processing\" type=\"button\" name=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"cancelSubmission(blog._id)\">Cancel</button>\n          </form>\n          <!-- Form: Comment Form End -->\n\n        </div>\n\n        <!-- Show Comments -->\n        <li *ngIf=\"enabledComments.indexOf(blog._id) === -1 && blog.comments.length > 0\" class=\"list-group-item\">\n          <span (click)=\"expand(blog._id)\">\n            Show comments&nbsp;&nbsp;\n            <div class=\"glyphicon glyphicon-comment\"></div>\n          </span>\n        </li>\n\n        <!-- Hide Comments -->\n        <li *ngIf=\"enabledComments.indexOf(blog._id) > -1\" class=\"list-group-item\">\n          <span (click)=\"collapse(blog._id)\">\n            Hide Comments&nbsp;&nbsp;\n            <div class=\"glyphicon glyphicon-comment\"></div>\n          </span>\n        </li>\n\n        <!-- Comment -->\n        <div *ngIf=\"enabledComments.indexOf(blog._id) > -1\">\n          <li *ngFor=\"let comment of blog.comments\" class=\"list-group-item\">\n            <strong>{{ comment.commentator }}:</strong> {{ comment.comment }}\n          </li>\n        </div>\n    </ul>\n    <!-- Post Comment Box: End -->\n\n  </div>\n  <!-- Panel Outer Layer -->\n</div>\n<!-- Panel End -->","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {BlogserviceService} from '../../../services/blogservice.service';\n@Component({\n  selector: 'app-delblog',\n  templateUrl: './delblog.component.html',\n  styleUrls: ['./delblog.component.css']\n})\nexport class DelblogComponent implements OnInit {\n  message;\n  messageClass;\n  foundBlog = false;\n  processing = false;\n  blog;\n  currentUrl;\n  constructor(\n    private blogService: BlogserviceService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.currentUrl = this.activatedRoute.snapshot.params; // Get URL paramaters on page load\n    // Function for GET request to retrieve blog\n    this.blogService.getSingleBlog(this.currentUrl.id).subscribe(data => {\n      // Check if request was successfull\n      if (!data.success) {\n        this.messageClass = 'alert alert-danger'; // Return bootstrap error class\n        this.message = data.message; // Return error message\n      } else {\n        // Create the blog object to use in HTML\n        this.blog = {\n          title: data.blog.title, // Set title\n          body: data.blog.body, // Set body\n          createdBy: data.blog.createdBy, // Set created_by field\n          createdAt: data.blog.createdAt // Set created_at field\n        }\n        this.foundBlog = true; // Displaly blog window\n      }\n    });\n  }\n  \n\n\n  // Function to delete blogs\n  deleteBlog() {\n    this.processing = true; // Disable buttons\n    // Function for DELETE request\n    this.blogService.deleteBlog(this.currentUrl.id).subscribe(data => {\n      // Check if delete request worked\n      if (!data.success) {\n        this.messageClass = 'alert alert-danger'; // Return error bootstrap class\n        this.message = data.message; // Return error message\n      } else {\n        this.messageClass = 'alert alert-success'; // Return bootstrap success class\n        this.message = data.message; // Return success message\n        // After two second timeout, route to blog page\n        setTimeout(() => {\n          this.router.navigate(['/blog']); // Route users to blog page\n        }, 2000);\n      }\n    });\n  }\n}\n","<h1 class=\"page-header\">Delete Blog</h1>\n\n<!-- Custom Success/Error Message -->\n<div class=\"row show-hide-message\" *ngIf=\"message\">\n  <div [ngClass]=\"messageClass\">\n    {{ message }}\n  </div>\n</div>\n\n<!-- Modal Confirmation Window -->\n<div class=\"col-md-6\" *ngIf=\"foundBlog\">\n  <!-- Model Outer Layer -->\n  <div class=\"modal-content\">\n    <!-- Modal Header -->\n    <div class=\"modal-header\">\n      <!-- Close Button -->\n      <button type=\"button\" name=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n      <!-- Modal Title -->\n      <h4 class=\"modal-title\">Confirm</h4>\n    </div>\n\n    <!-- Modal Body -->\n    <div class=\"modal-body\">\n      <p>Are you sure you would like to delete this blog?</p>\n    </div>\n\n    <!-- Modal Footer -->\n    <div class=\"modal-footer\">\n      <!-- Yes Button -->\n      <button [disabled]=\"processing\" type=\"button\" name=\"button\" class=\"btn btn-success\" (click)=\"deleteBlog()\">Yes</button>\n      <!-- No Button -->\n      <a routerLink=\"/blog\"><button [disabled]=\"processing\" type=\"button\" name=\"button\" class=\"btn btn-danger\">No</button></a>\n    </div>\n  </div>\n\n  <br />\n\n  <!-- Panel -->\n  <div class=\"panel panel-primary\">\n    <!-- Panel Heading -->\n    <div class=\"panel-heading\">\n      <!-- Panel Title -->\n      <h3 class=\"panel-title\">{{ blog.title }}</h3>\n    </div>\n\n    <!-- Panel Body -->\n    <div class=\"panel-body\">\n      {{ blog.body }}\n    </div>\n\n    <!-- Panel Footer -->\n    <div class=\"panel-footer\">\n      <strong>Posted by: </strong> {{ blog.createdBy }}\n      <br />\n      <strong>Date: </strong> {{ blog.createdAt | date:'MMM dd, yyyy' }}\n    </div>\n  </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {BlogserviceService} from '../../../services/blogservice.service';\n\n@Component({\n  selector: 'app-editblog',\n  templateUrl: './editblog.component.html',\n  styleUrls: ['./editblog.component.css']\n})\nexport class EditblogComponent implements OnInit {\n\n  message;\n  messageClass;\n  blog;\n  processing = false;\n  currentUrl;\n  loading = true;\n\n  constructor(private location: Location,\n    private activatedRoute: ActivatedRoute,\n    private blogService: BlogserviceService,\n    private router: Router) { }\n\n    // Function to Submit Update\n  updateBlogSubmit() {\n    this.processing = true; // Lock form fields\n    // Function to send blog object to backend\n    this.blogService.editBlog(this.blog).subscribe(data => {\n      // Check if PUT request was a success or not\n      if (!data.success) {\n        this.messageClass = 'alert alert-danger'; // Set error bootstrap class\n        this.message = data.message; // Set error message\n        this.processing = false; // Unlock form fields\n      } else {\n        this.messageClass = 'alert alert-success'; // Set success bootstrap class\n        this.message = data.message; // Set success message\n        // After two seconds, navigate back to blog page\n        setTimeout(() => {\n          this.router.navigate(['/blog']); // Navigate back to route page\n        }, 2000);\n      }\n    });\n  }\n\n  // Function to go back to previous page\n  goBack() {\n    this.location.back();\n  }\n\n\n\n  ngOnInit(): void {\n    this.currentUrl = this.activatedRoute.snapshot.params; // When component loads, grab the id\n    // Function to GET current blog with id in params\n    this.blogService.getSingleBlog(this.currentUrl.id).subscribe(data => {\n      // Check if GET request was success or not\n      if (!data.success) {\n        this.messageClass = 'alert alert-danger'; // Set bootstrap error class\n        this.message = 'Blog not found.'; // Set error message\n      } else {\n        this.blog = data.blog; // Save blog object for use in HTML\n        this.loading = false; // Allow loading of blog form\n      }\n    });\n\n  }\n\n}\n","<h1 class=\"page-header\">Edit Blog</h1>\n\n<!-- Custom Success/Erro Message -->\n<div class=\"row show-hide-message\" *ngIf=\"message\">\n  <div [ngClass]=\"messageClass\">\n    {{ message }}\n  </div>\n</div>\n\n<!-- Edit Blog Form -->\n<form (submit)=\"updateBlogSubmit()\" *ngIf=\"!loading\">\n  <!-- Title Field -->\n  <div class=\"form-group\">\n    <label for=\"title\">Title</label>\n    <!-- Title Input -->\n    <input [disabled]=\"processing\" type=\"text\" name=\"title\" placeholder=\"*Blog Title\" class=\"form-control\" [(ngModel)]=\"blog.title\" />\n  </div>\n\n  <!-- Body Field -->\n  <div class=\"form-group\">\n    <label for=\"body\">Body</label>\n    <!-- Body Input -->\n    <textarea [disabled]=\"processing\" name=\"body\" rows=\"8\" cols=\"80\" [(ngModel)]=\"blog.body\" class=\"form-control\" placeholder=\"*Blog Body\"></textarea>\n  </div>\n\n  <!-- Delete Button -->\n  <a [routerLink]=\"['/delete-blog/', blog._id]\"><button  [disabled]=\"processing\"  type=\"button\" name=\"button\" class=\"btn btn-danger\">Delete</button></a>\n  <!-- Go Back Button -->\n  <button [disabled]=\"processing\" type=\"button\" name=\"button\" class=\"btn btn-success\" (click)=\"goBack()\">Go Back</button>\n  <!-- Save Changes Button -->\n  <button [disabled]=\"processing\" type=\"submit\" name=\"save\" class=\"btn btn-info\">Save Changes</button>\n\n</form>","import { Component, OnInit,ViewChild, AfterViewInit, ViewChildren, ElementRef} from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport{MatTableDataSource} from '@angular/material/table';\nimport {MatSort} from '@angular/material/sort';\nimport { MatPaginatorModule, MatPaginator } from '@angular/material/paginator';\nimport { MatDialog } from '@angular/material/dialog';\nimport {EditComponent} from '../../dialog/edit/edit.component';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, Observable, merge, fromEvent } from 'rxjs';\n\nimport {EmpService} from '../../services/emp.service';\nimport {map} from 'rxjs/operators';\nimport {HttpClient} from '@angular/common/http';\nimport {FlashMessagesService} from 'angular2-flash-messages';\nimport { ToastrService } from 'ngx-toastr';\nimport { AddComponent } from 'src/app/dialog/add/add.component';\nimport { DeleteComponent } from 'src/app/dialog/delete/delete.component';\n@Component({\n  selector: 'app-changemate',\n  templateUrl: './changemate.component.html',\n  styleUrls: ['./changemate.component.css']\n})\nexport class ChangemateComponent implements OnInit{\n  medicineprice:Medicineprice[];\n  \n\n\n\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\n  @ViewChild(MatPaginator, {static: true}) paginator:MatPaginator;\n  @ViewChild('filter',  {static: true}) filter: ElementRef;\n  //displayedColumns: string[] = ['position', 'name', 'weight', 'symbol'];\n  displayedColumns: string[] = ['medname', 'price','id','quantity','add'];\n  //displayedcolumns: string[] = ['medname', 'price','id'];\n    //dataSource =new MatTableDataSource(ELEMENT_DATA);\n // dataSource;\n // @ViewChild(MatPaginator) paginator: MatPaginator;  \n // @ViewChild(MatSort) sort: MatSort;\n\n\n //below is for edit in mattable\n index: number;\n  id: string;\n  exampleDatabase: EmpService | null;\n  //exampleDatabase: DataService | null;\n  dataSource: ExampleDataSource | null;\n\n\n\n\n  constructor(private authService:AuthService ,\n    public dialog: MatDialog,\n    public dataService:EmpService,\n    public httpClient: HttpClient,\n    private flashMessage:FlashMessagesService,\n    private toastr: ToastrService) \n    {\n  }\n\n\n\n\n  ngOnInit() {  \n   // this.authService.viewAllMedicinePrice().subscribe(medicineprice=>{\n //     this.dataSource=new MatTableDataSource(medicineprice);\n //   })\n    //  this.dataSource.paginator = this.paginator;  \n   \n    this.loadData();\n     \n  } \n  refresh() {\n    this.loadData();\n  }\n  /*\n  ngAfterViewInit() { \n    this.dataSource.sort = this.sort; \n    this.dataSource.paginator = this.paginator;\n  }\n  */\n\n\n  applyfilter(filterValue: string) {  \n    this.dataSource.filter = filterValue.trim().toLowerCase();  \n  \n   \n  } \n\n\n  addNew(){\n    const dialogRef = this.dialog.open(AddComponent, {\n      data: {issue: this.medicineprice }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result === 1) {\n        // After dialog is closed we're doing frontend updates\n        // For add we're just pushing a new row inside DataService\n        this.exampleDatabase.dataChange.value.push(this.dataService.getDialogData());\n        this.refreshTable();\n      }\n    });\n\n  }\n  startEdit(i: number,medname:string,price:number,quantity:number,id: string){\n    this.id = id;\n    this.index = i;\n    console.log(this.index);\n    const dialogRef = this.dialog.open(EditComponent, {\n      data: {id: id,medname: medname, price: price,quantity:quantity}\n    });\n\n    \n    dialogRef.afterClosed().subscribe(result => {\n      if (result === 1) {\n        // When using an edit things are little different, firstly we find record inside DataService by id\n        const foundIndex = this.exampleDatabase.dataChange.value.findIndex(x => x.id === this.id);\n        // Then you update that record using data from dialogData (values you enetered)\n        this.exampleDatabase.dataChange.value[foundIndex] = this.dataService.getDialogData();\n        // And lastly refresh table\n        this.refreshTable();\n      }\n    });\n    \n  }\n  deleteItem(i: number, medname:string,price:number,quantity:number,id: string) {\n    this.index = i;\n    this.id = id;\n    const dialogRef = this.dialog.open(DeleteComponent, {\n      data: {id: id, medname: medname, price: price,quantity:quantity}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result === 1) {\n        const foundIndex = this.exampleDatabase.dataChange.value.findIndex(x => x.id === this.id);\n        // for delete we use splice in order to remove single object from DataService\n        this.exampleDatabase.dataChange.value.splice(foundIndex, 1);\n        this.refreshTable();\n      }\n    });\n  }\n  \n\n \n\n  private refreshTable() {\n    // Refreshing table using paginator\n    // Thanks yeager-j for tips\n    // https://github.com/marinantonio/angular-mat-table-crud/issues/12\n    this.paginator._changePageSize(this.paginator.pageSize);\n  }\n\n  public loadData() {\n    this.exampleDatabase = new EmpService(this.httpClient,this.toastr);\n    this.dataSource = new ExampleDataSource(this.exampleDatabase, this.paginator, this.sort);\n    fromEvent(this.filter.nativeElement, 'keyup')\n      // .debounceTime(150)\n      // .distinctUntilChanged()\n      .subscribe(() => {\n        if (!this.dataSource) {\n          return;\n        }\n        this.dataSource.filter = this.filter.nativeElement.value;\n      });\n  }\n}\n\n  \n\n\n\n\nexport class ExampleDataSource extends DataSource<Medicineprice> {\n  _filterChange = new BehaviorSubject('');\n\n  get filter(): string {\n    return this._filterChange.value;\n  }\n\n  set filter(filter: string) {\n    this._filterChange.next(filter);\n  }\n\n  filteredData: Medicineprice[] = [];\n  renderedData: Medicineprice[] = [];\n\n  constructor(public _exampleDatabase: EmpService,\n              public _paginator: MatPaginator,\n              public _sort: MatSort) {\n    super();\n    // Reset to the first page when the user changes the filter.\n    this._filterChange.subscribe(() => this._paginator.pageIndex = 0);\n  }\n\n  /** Connect function called by the table to retrieve one stream containing the data to render. */\n  connect(): Observable<Medicineprice[]> {\n    // Listen for any changes in the base data, sorting, filtering, or pagination\n    const displayDataChanges = [\n      this._exampleDatabase.dataChange,\n      this._sort.sortChange,\n      this._filterChange,\n      this._paginator.page\n    ];\n\n    this._exampleDatabase.getAllIssues();\n\n\n    return merge(...displayDataChanges).pipe(map( () => {\n        // Filter data\n        this.filteredData = this._exampleDatabase.data.slice().filter((issue: Medicineprice) => {\n          const searchStr = (issue.id + issue.medname + issue.price+issue.quantity).toLowerCase();\n          return searchStr.indexOf(this.filter.toLowerCase()) !== -1;\n        });\n\n        // Sort filtered data\n        const sortedData = this.sortData(this.filteredData.slice());\n\n        // Grab the page's slice of the filtered sorted data.\n        const startIndex = this._paginator.pageIndex * this._paginator.pageSize;\n        this.renderedData = sortedData.splice(startIndex, this._paginator.pageSize);\n        return this.renderedData;\n      }\n    ));\n  }\n\n  disconnect() {}\n\n\n  /** Returns a sorted copy of the database data. */\n  sortData(data: Medicineprice[]): Medicineprice[] {\n    if (!this._sort.active || this._sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      let propertyA: number | string = '';\n      let propertyB: number | string = '';\n\n      switch (this._sort.active) {\n        case 'id': [propertyA, propertyB] = [a.id, b.id]; break;\n        case 'medname': [propertyA, propertyB] = [a.medname, b.medname]; break;\n        case 'price': [propertyA, propertyB] = [a.price, b.price]; break;\n        case 'quantity': [propertyA, propertyB] = [a.quantity, b.quantity]; break;\n        \n      }\n\n      const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n\n      return (valueA < valueB ? -1 : 1) * (this._sort.direction === 'asc' ? 1 : -1);\n    });\n  }\n}\n\n\n\n\n\ninterface Medicineprice{\n  medname:string,\n  price:number,\n  quantity:number,\n  id:string\n  \n  }\n\n","<p>changemate works!</p>\n<!--\n<mat-form-field>\n    <input (keyup)=\"applyfilter($event.target.value)\" matInput placeholder=\"Enter\">\n</mat-form-field>\n-->\n<div class=\"form\">\n  <mat-form-field floatPlaceholder=\"never\" color=\"accent\">\n    <input matInput #filter placeholder=\"Filter issues\">\n  </mat-form-field>\n</div>\n\n<table mat-table [dataSource]=\"dataSource\" matSort class=\"mat-elevation-z8\">\n\n    <!--- Note that these columns can be defined in any order.\n          The actual rendered columns are set as a property on the row definition\" -->\n  \n    <!-- Position Column -->\n    <ng-container matColumnDef=\"medname\">\n      <th mat-header-cell mat-sort-header *matHeaderCellDef> Medicine name </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.medname}} </td>\n    </ng-container>\n  \n    <!-- Name Column -->\n    <ng-container matColumnDef=\"price\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Price </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.price}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"quantity\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Quantity </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.quantity}} </td>\n      </ng-container>\n\n\n      <ng-container matColumnDef=\"add\">\n        <mat-header-cell *matHeaderCellDef>\n          <button mat-icon-button color=\"primary\" (click)=\"addNew()\">\n            <mat-icon>add</mat-icon>\n          </button>\n        </mat-header-cell>\n\n        <mat-cell *matCellDef=\"let row; let i=index;\">\n          <button mat-icon-button color=\"accent\" (click)=\"startEdit(i,row.medname,row.price,row.quantity,row.id)\">\n            <mat-icon aria-label=\"Edit\">edit</mat-icon>\n          </button>\n       \n\n     \n          <button mat-icon-button color=\"accent\" (click)=\"deleteItem(i,row.medname,row.price,row.quantity,row.id)\">\n            <mat-icon aria-label=\"Delete\">delete</mat-icon>\n          </button>\n        </mat-cell>\n\n  </ng-container>\n    \n  \n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>  \n  <mat-paginator #paginator\n  [length]=\"dataSource.filteredData.length\"\n  [pageIndex]=\"0\"\n  [pageSize]=\"10\"\n  [pageSizeOptions]=\"[5, 10, 25, 100]\">\n</mat-paginator>\n\n","import { Component, OnInit} from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { FormArray, FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-changeprice',\n  templateUrl: './changeprice.component.html',\n  styleUrls: ['./changeprice.component.css']\n})\nexport class ChangepriceComponent implements OnInit {\n  medicineprice:Medicineprice[];\n  showMedicine:boolean=false;\n  editRowId:any='';\n  temp:any=false;\n\n\n\n   \n\n  constructor(private authService:AuthService) { }\n  \n  ngOnInit(): void {\n    this.authService.viewAllMedicinePrice().subscribe(medicineprice=>\n      this.medicineprice=medicineprice);\n      console.log(this.medicineprice[0].medname);\n    \n  }\n\n\n  Edit(val){\n     \n    this.editRowId=val;\n  }\n \n\n\n  Add(){\n    \n    console.log(this.medicineprice.length);\n    this.temp=true;\n  }\n  //this will edit the changes in the datbase\n  Save(val){\n    \n    this.authService.saveeditedmed(this.medicineprice[val]).subscribe(data=>{\n      if(data.success){\n       \n      }\n      else{\n\n  \n      }\n    });\n\n\n    \n  }\n\n \n\n\n}\ninterface Medicineprice{\n  medname:string,\n  price:Number,\n  id:string,\n  \n  }\n\n","<p>changeprice works!</p>\n\n\n<table class=\"table table-striped table-bordered\"> \n    <thead>  \n        <th>Medicine Name</th>          \n        <th>Price</th> \n        <th>Edit</th>  \n       </thead>  \n       <tbody>  \n        \n\n<tr *ngFor=\"let pre of medicineprice\">\n    <td *ngIf=\"pre.id===editRowId\"><input type=\"text\" [(ngModel)]=\"pre.medname\"></td>\n    <td *ngIf=\"pre.id!==editRowId\" >{{pre.medname}}</td>\n    <td *ngIf=\"pre.id===editRowId\"><input type=\"text\" [(ngModel)]=\"pre.price\"></td>\n    <td *ngIf=\"pre.id!==editRowId\">{{pre.price}}</td>\n    \n    <td>\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"Edit(pre.id)\">Edit</button>  \n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n    \n        <button type=\"button\" class=\"btn btn-danger\">Delete</button>  \n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"Save(pre.id)\">Save</button> \n    </td>\n<br>\n</tr>\n\n<tr *ngIf=\"temp\">\n    <td ><input type=\"text\"></td>\n</tr>\n\n\n</tbody>\n</table>\n\n<button type=\"submit\" class=\"btn btn-primary\" (click)=\"Add()\">Add New Medicine</button>\n\n\n<br><br><br><br><br>\n","import { Component, OnInit,ViewChild,ElementRef} from '@angular/core';\nimport {TransferService} from '../../services/transfer.service';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport *as jsPDF from 'jspdf'\nimport {FlashMessagesService} from 'angular2-flash-messages';\n@Component({\n  selector: 'app-checkoutprescription',\n  templateUrl: './checkoutprescription.component.html',\n  styleUrls: ['./checkoutprescription.component.css']\n})\nexport class CheckoutprescriptionComponent implements OnInit {\n  @ViewChild('content') content:ElementRef;\n  //medicineprice:Medicineprice;\n              //medicineprice:{price:Number,total:Number};\n  medicineprice:Medicineprice;\n  total:number=0;\n  data=this.transferService.getData();\n  \n \n\n  constructor(private transferService:TransferService,private router:Router,\n    private authService:AuthService,\n    private flashMessage:FlashMessagesService) { }\n\n  ngOnInit(): void {\n    var x;\n    var mediname={medname:this.data.medname,quant:this.data.quantity};\n    this.authService.viewMedicinePrice(mediname).subscribe(medicineprice=>\n    \n      this.medicineprice=medicineprice);\n      console.log(this.medicineprice);\n     \n        for(x in this.medicineprice.price)\n        {console.log(JSON.stringify(this.medicineprice.price[x]));\n          this.total=this.total+this.medicineprice.price[x];\n        }\n       \n      \n\n      \n\n\n    \n\n  }\n\n  public downloadpdf(){\n    this.updateQuantity();\n    console.log(\"PDF WORKS\");\n    let doc=new jsPDF();\n\n    let specialElementHandlers={\n      '#editor':function(element,renderer){\n        return true;\n      }\n    };\n\n    let content=this.content.nativeElement;\n    doc.fromHTML(content.innerHTML,15,15,{\n      'width':190,\n      'elementHandlers':specialElementHandlers\n    });\n\n    doc.save('tst.pdf')\n\n  }\n\n  public goBack()\n  {\n    \n  }\n\n  updateQuantity()\n  {var x;\n\n    var obj={\n              medname:[],\n              quantity:[]\n            \n            };\n            \n            for(x in this.medicineprice.medname)\n            {\n              obj.medname[x]=this.medicineprice.medname[x];\n              obj.quantity[x]=this.medicineprice.quantity[x];\n            }\n            \n           this.authService.updatequant(obj).subscribe(data=>{\n              \n             \n                   //after inserting prescription to database\n              \n           \n\n           \n        });\n        this.flashMessage.show(\"Checkout Successful\",{cssClass:'alert-success',timeout:5000});\n              this.router.navigate(['graph']);\n\n  }\n  \n\n  \n\n}\ninterface Medicineprice{\n  medname:string[],\n  price:number[],\n  quantity:number[],\n  total:number\n    \n  }","\n<p>checkoutprescription works!</p>\n<div id=\"content\" #content>\nUsername:{{data.username}}<br>\nMedicine:{{data.medname}}<br>\nbreakfast:{{data.breakfast}}<br>\nlunch:{{data.lunch}}<br>\n<br><br><br>\n<hr>\n     <table class=\"table table-striped table-bordered\">\n  <thead>\n              <tr>\n                <th>Medicine Name</th>\n                <th>Price</th>\n                <th>Quantity</th>\n                \n              </tr>\n            </thead>\n            <tbody>\n                \n                  <tr *ngFor=\"let mprice of medicineprice.price let i=index\">\n                    <td>{{data.medname[i]}}</td>\n                    <td>{{mprice}}</td>\n                    <td>{{data.quantity[i]}}</td>\n                  </tr>\n                  \n            </tbody>\n          </table>\n       \n<hr>\n<b>Total</b>{{medicineprice.total}}\n<br>\n\n</div>\n<button (click)=\"updateQuantity()\">Submit</button>\n<button (click)=\"downloadpdf()\">Download PDF</button>\n<button (click)=\"goBack()\">Discard</button>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>dashboard works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport {FlashMessagesService} from 'angular2-flash-messages';\nimport{Router} from '@angular/router';\n@Component({\n  selector: 'app-disease',\n  templateUrl: './disease.component.html',\n  styleUrls: ['./disease.component.css']\n})\nexport class DiseaseComponent implements OnInit {\n  dname:string;\n  desc:string;\n  symp:string;\n  tre:string;\n  cause:string;\n  constructor(private authService:AuthService,\n    private router:Router,\n    private flashMessage:FlashMessagesService) { }\n\n  ngOnInit(): void {\n  }\n\n  Submit(){\n    const disease={\n      dname:this.dname,\n      desc:this.desc,\n      symp:this.symp,\n      tre:this.tre,\n      cause:this.cause\n    }\n\n    this.authService.registerDisease(disease).subscribe(data=>{\n      if(data.success){\n        this.flashMessage.show(\"Drug registered in database\",{cssClass:'alert-success',timeout:3000});\n        this.router.navigate(['/']);\n      }\n      else{\n\n        this.flashMessage.show(\"Something Went Wrong\",{cssClass:'alert-danger',timeout:3000});\n        \n      }\n    });\n\n\n\n  }\n\n}\n","Disease Name:\n<input type=\"text\" [(ngModel)]=\"dname\" name=\"dname\" class=\"form-control\" placeholder=\"Enter Disease Name\">\n<br><br>\nDescription:\n<input type=\"text\" [(ngModel)]=\"desc\" name=\"desc\" class=\"form-control\" placeholder=\"Enter Description\">\n<br><br>\nSymptoms:\n<input type=\"text\" [(ngModel)]=\"symp\" name=\"symp\" class=\"form-control\" placeholder=\"Enter symptoms\">\n<br><br>\nTreatment\n<input type=\"text\" [(ngModel)]=\"tre\" name=\"tre\" class=\"form-control\" placeholder=\"Enter Tratment for the diease\">\nCauses:\n<input type=\"text\" [(ngModel)]=\"cause\" name=\"cause\" class=\"form-control\" placeholder=\"Enter causes\">\n\n<br><br><br><br>\n<button type=\"submit\" class=\"btn btn-primary\" (click)=\"Submit()\">Submit</button>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport {FlashMessagesService} from 'angular2-flash-messages';\nimport{Router} from '@angular/router';\n@Component({\n  selector: 'app-drug',\n  templateUrl: './drug.component.html',\n  styleUrls: ['./drug.component.css']\n})\nexport class DrugComponent implements OnInit {\n  mname:string;\n  desc:String;\n  uses:String;\n  pre:String;\n  \n  constructor(private authService:AuthService,\n    private router:Router,\n    private flashMessage:FlashMessagesService) { }\n\n  ngOnInit(): void {\n\n  }\n\n  Submit(){\n    const drug={\n      mname:this.mname,\n      desc:this.desc,\n      uses:this.uses,\n      pre:this.pre\n    }\n\n    this.authService.registerDrug(drug).subscribe(data=>{\n      if(data.success){\n        this.flashMessage.show(\"Drug registered in database\",{cssClass:'alert-success',timeout:3000});\n        this.router.navigate(['/']);\n      }\n      else{\n\n        this.flashMessage.show(\"Something Went Wrong\",{cssClass:'alert-danger',timeout:3000});\n        \n      }\n    });\n\n\n\n  }\n\n}\n\n","Medicine Name:\n<input type=\"text\" [(ngModel)]=\"mname\" name=\"mname\" class=\"form-control\" placeholder=\"Enter Medicine Name\">\n<br><br>\nDescription:\n<input type=\"text\" [(ngModel)]=\"desc\" name=\"desc\" class=\"form-control\" placeholder=\"Enter Description\">\n<br><br>\nUses:\n<input type=\"text\" [(ngModel)]=\"uses\" name=\"uses\" class=\"form-control\" placeholder=\"Enter Usage\">\n<br><br>\nPrecaution:\n<input type=\"text\" [(ngModel)]=\"pre\" name=\"pre\" class=\"form-control\" placeholder=\"Enter Necessary Precaution to be taken\">\n\n<br><br><br><br>\n<button type=\"submit\" class=\"btn btn-primary\" (click)=\"Submit()\">Submit</button>\n","import { Component, OnInit } from '@angular/core';\nimport{Router} from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n@Component({\n  selector: 'app-encyclo',\n  templateUrl: './encyclo.component.html',\n  styleUrls: ['./encyclo.component.css']\n})\nexport class EncycloComponent implements OnInit {\n    drug:Drug [];\n    disease:Disease[];\n  constructor(private router:Router,private authService:AuthService) { }\n\n  ngOnInit(): void {\n   \n\n    \n\n  }\n\n  drugload()\n  {\n\n    this.authService.viewDrugs().subscribe(drug=>{\n     \n      \n      this.drug=drug;\n\n  });\n\n  }\n\n  diseaseload()\n  {\n    this.authService.viewDiseases().subscribe(disease=>{\n     \n      \n      this.disease=disease;\n  });\n \n\n\n}\n}\n\ninterface Drug{\n  mname:string,\n    desc:string,\n    uses:string,\n    pre:string\n    \n}\n\ninterface Disease{\n  dname:string,\n    desc:string,\n    symp:string,\n    tre:string,\n    cause:string\n    \n}\n","<button (click)=\"drugload()\">Load Drugs</button>\n<ul class=\"list-group\">\n       \n    <li class=\"list-group-item\" *ngFor=\"let pree of drug; index as i\" ><b>MEDICINE:</b>{{pree.mname}}<br><br><b>Description:</b>{{pree.desc}}<br><br><b>Uses:</b>{{pree.uses}}<br><br><b>Precaution:</b>{{pree.pre}}\n        \n    \n    </li>\n</ul> \n\n<button (click)=\"diseaseload()\">Load Diseases</button>\n<ul class=\"list-group\">\n       \n    <li class=\"list-group-item\" *ngFor=\"let pr of disease; index as i\" ><b>Disease:</b>{{pr.dname}}<br><br><b>Description:</b>{{pr.desc}}<br><br><b>Symptoms:</b>{{pr.symp}}<br><br><b>Treatment:</b>{{pr.tre}}<br><br><b>Causes:</b>{{pr.cause}}\n        \n    \n    </li>\n</ul> ","import { Component, OnInit } from '@angular/core';\nimport * as Highcharts from 'highcharts';\nimport {AuthService} from '../../services/auth.service';\n@Component({\n  selector: 'app-graph',\n  templateUrl: './graph.component.html',\n  styleUrls: ['./graph.component.css']\n})\nexport class GraphComponent implements OnInit {\n\n/*\napidata=[ { name: 'Botyle', y: 101 },\n{ name: 'Isofenyle', y: 12 },\n{ name: 'Propyl', y: 31 },\n{ name: 'Crocine', y: 3 },\n{ name: 'Dispereine', y: 8 },\n{ name: 'Penicilin', y: 69 },\n{ name: 'skroy', y: 11 } ];\n*/\napidata=[];\nloading = true;\nconstructor(private authService:AuthService) { }\n\nHighcharts: any;\nchartOptions: any;\n/*\n  Highcharts: typeof Highcharts = Highcharts; \n  chartOptions: Highcharts.Options = {\n    chart: {\n      plotBackgroundColor: null,\n      plotBorderWidth: null,\n      plotShadow: false,\n      type: 'pie'\n  },\n  title: {\n      text: 'Browser market shares in January, 2018'\n  },\n  tooltip: {\n      pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n  },\n  accessibility: {\n      point: {\n          valueSuffix: '%'\n      }\n  },\n  plotOptions: {\n      pie: {\n          allowPointSelect: true,\n          cursor: 'pointer',\n          dataLabels: {\n              enabled: true,\n              format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n          }\n      }\n  },\n  series: [{\n      name: 'Brands',\n      colorByPoint: true,\n      data: this.apidata\n  }]\n}\n\n  */\n  \n\n  ngOnInit(): void {\n    \n    this.authService.getgraph().subscribe(data=>{\n      this.Highcharts = Highcharts;\n      this.chartOptions = {\n          chart: {\n            plotBackgroundColor: null,\n            plotBorderWidth: null,\n            plotShadow: false,\n            type: 'pie'\n          },\n          title: {\n            text: \"Medicines Stock\"\n          },\n          tooltip: {\n            pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n          },\n          accessibility: {\n            point: {\n                valueSuffix: '%'\n            }\n        },\n        plotOptions: {\n          pie: {\n              allowPointSelect: true,\n              cursor: 'pointer',\n              dataLabels: {\n                  enabled: true,\n                  format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n              }\n          }\n      },\n         \n      series: [{\n        name: 'stock',\n        colorByPoint: true,\n        data: data\n    }]\n      };\n      this.loading = false;\n  },\n  () => { });\n   \n    \n  }\n\n}\n","<div *ngIf=\"!loading && chartOptions\">\n\n\n<highcharts-chart \n  [Highcharts]=\"Highcharts\"\n\n  \n  [options]=\"chartOptions\"\n\n\n  style=\"width: 100%; height: 400px; display: block;\"\n></highcharts-chart>\n</div>\n<br>\n<app-graph2></app-graph2>","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '../../services/auth.service';\nimport * as Highcharts from 'highcharts';\n@Component({\n  selector: 'app-graph2',\n  templateUrl: './graph2.component.html',\n  styleUrls: ['./graph2.component.css']\n})\nexport class Graph2Component implements OnInit {\n  apidata=[];\nloading = true;\nHighcharts: any;\nchartOptions: any;\n  constructor(private authService:AuthService) { }\n\n  ngOnInit(): void {\n    const ob={axis:[]};\n    var x;\n    this.authService.getgraph2().subscribe(data=>{\n      for(x in data)\n      {\n         ob[x]=data[x].name;\n      }\n      console.log(ob);\n      \n      this.Highcharts = Highcharts;\n      this.chartOptions = { \n        title: {\n        text: 'Sales Chart'\n    },\n\n    subtitle: {\n        text: 'Plain'\n    },\n\n    xAxis: {\n        categories:ob\n    },\n\n      series: [{\n        type: 'column',\n        colorByPoint: true,\n        data:data,\n      showInLegend: false}]\n    };\n    this.loading = false;\n  },\n  () => { });\n}\n\n}\n","<div *ngIf=\"!loading && chartOptions\">\n\n\n    <highcharts-chart \n      [Highcharts]=\"Highcharts\"\n    \n      \n      [options]=\"chartOptions\"\n    \n    \n      style=\"width: 100%; height: 400px; display: block;\"\n    ></highcharts-chart>\n    </div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>home works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '../../services/auth.service';\nimport {Router} from '@angular/router';\nimport {FlashMessagesService} from 'angular2-flash-messages';\nimport {Globals} from '../../services/glob';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n   \n   password:string;\n   email:string;\n  \n   constructor(private authService:AuthService,\n    private router:Router,\n    private flashMessage:FlashMessagesService,\n    private globals: Globals) {\n\n   }\n\n  ngOnInit(): void {\n  }\n\n  onLoginSubmit(){\n    const user={\n      email:this.email,\n      password:this.password\n    }\n\n    this.authService.authenticateUser(user).subscribe(data=>{\n        if(data.success){\n          this.authService.storeUserData(data.token,data.user);\n            this.flashMessage.show(\"You are Logged In\",{cssClass:'alert-success',timeout:5000});\n            this.router.navigate(['dashboard']);\n\n            //temp\n            this.globals.set(data.user.username);\n           // console.log(this.globals.uname);\n          \n        } \n        else{\n            this.flashMessage.show(data.msg,{cssClass:'alert-danger',timeout:5000});\n            this.router.navigate(['login']);\n        } \n\n    });\n\n  }\n\n}\n","<form (submit)=\"onLoginSubmit()\">\n    <fieldset>\n      <legend>Login</legend>\n      \n\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Email address</label>\n        <input type=\"email\" [(ngModel)]=\"email\" name=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\">\n        \n      </div>\n      <div class=\"form-group\">\n        <label for=\"exampleInputPassword1\">Password</label>\n        <input type=\"password\" [(ngModel)]=\"password\" name=\"password\"class=\"form-control\" id=\"password\" placeholder=\"Password\">\n      </div>\n      \n     \n      \n      <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </fieldset>\n  </form>","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '../../services/auth.service';\nimport {Router} from '@angular/router';\nimport {FlashMessagesService} from 'angular2-flash-messages';\nimport {Globals} from '../../services/glob';\n@Component({\n  selector: 'app-loginchemist',\n  templateUrl: './loginchemist.component.html',\n  styleUrls: ['./loginchemist.component.css']\n})\nexport class LoginchemistComponent implements OnInit {\n  password:string;\n  email:string;\n  constructor(private authService:AuthService,\n    private router:Router,\n    private flashMessage:FlashMessagesService,\n    private globals: Globals) { }\n\n  ngOnInit(): void {\n  }\n\n  onLoginSubmit(){\n    const user={\n      email:this.email,\n      password:this.password\n    }\n\n    this.authService.authenticateChemist(user).subscribe(data=>{\n        if(data.success){\n          this.authService.storeChemistData(data.token,data.user);\n            this.flashMessage.show(\"You are Logged In\",{cssClass:'alert-success',timeout:5000});\n            this.router.navigate(['profile']);\n            //below istemp\n            this.globals.uname=data.user.username;\n            //console.log(this.globals.uname);\n        } \n        else{\n            this.flashMessage.show(data.msg,{cssClass:'alert-danger',timeout:5000});\n            this.router.navigate(['login']);\n        } \n\n    });\n\n  }\n\n}\n","<form (submit)=\"onLoginSubmit()\">\n    <fieldset>\n      <legend>Login Chemist</legend>\n      \n\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Email address</label>\n        <input type=\"email\" [(ngModel)]=\"email\" name=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\">\n        \n      </div>\n      <div class=\"form-group\">\n        <label for=\"exampleInputPassword1\">Password</label>\n        <input type=\"password\" [(ngModel)]=\"password\" name=\"password\"class=\"form-control\" id=\"password\" placeholder=\"Password\">\n      </div>\n      \n     \n      \n      <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </fieldset>\n  </form>","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '../../services/auth.service';\nimport {Router} from '@angular/router';\nimport {FlashMessagesService} from 'angular2-flash-messages';\nimport {Globals} from '../../services/glob';\n@Component({\n  selector: 'app-logindoctor',\n  templateUrl: './logindoctor.component.html',\n  styleUrls: ['./logindoctor.component.css']\n})\nexport class LogindoctorComponent implements OnInit {\n   \n  password:string;\n  email:string;\n \n  constructor(private authService:AuthService,\n    private router:Router,\n    private flashMessage:FlashMessagesService,\n    private globals: Globals) { }\n\n  ngOnInit(): void {\n  }\n  onLoginSubmit(){\n    const user={\n      email:this.email,\n      password:this.password\n    }\n\n    this.authService.authenticateDoctor(user).subscribe(data=>{\n        if(data.success){\n          this.authService.storeDoctorData(data.token,data.user);\n            this.flashMessage.show(\"You are Logged In\",{cssClass:'alert-success',timeout:5000});\n            this.router.navigate(['dashboard']);\n            this.globals.set(data.user.username);\n        } \n        else{\n            this.flashMessage.show(data.msg,{cssClass:'alert-danger',timeout:5000});\n            this.router.navigate(['login']);\n        } \n\n    });\n\n  }\n\n}\n","<form (submit)=\"onLoginSubmit()\">\n    <fieldset>\n      <legend>Login Doctor</legend>\n      \n\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Email address</label>\n        <input type=\"email\" [(ngModel)]=\"email\" name=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\">\n        \n      </div>\n      <div class=\"form-group\">\n        <label for=\"exampleInputPassword1\">Password</label>\n        <input type=\"password\" [(ngModel)]=\"password\" name=\"password\"class=\"form-control\" id=\"password\" placeholder=\"Password\">\n      </div>\n      \n     \n      \n      <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </fieldset>\n  </form>","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '../../services/auth.service';\nimport {Router} from '@angular/router';\nimport {FlashMessagesService} from 'angular2-flash-messages';\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor(public authService:AuthService,\n    private router:Router,\n    private flashMessage:FlashMessagesService) { }\n\n  ngOnInit(): void {\n  }\n\n  onLogoutClick(){\n    this.authService.logout();\n    this.flashMessage.show(\"You Have been successfully logged out\",{cssClass:'alert-success',timeout:3000});\n    this.router.navigate(['/login']);\n  }\n\n}\n","\n\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n    <a class=\"navbar-brand\" href=\"/\">ITM App</a>\n    \n    <div class=\"collapse navbar-collapse\" id=\"navbarsExample03\">\n      <ul class=\"navbar-nav mr-auto\">\n        <li class [routerLinkActive]=\"['active']\" [routerLinkActiveOptions]=\"{exact:true}\">\n          <a class=\"nav-link\" [routerLink]=\"['/']\">Home <span class=\"sr-only\">(current)</span></a>\n        </li>\n        <li *ngIf=\"authService.loggedInDoctor()\" class [routerLinkActive]=\"['active']\">\n          <a class=\"nav-link\" [routerLink]=\"['/dashboard']\">DashBoard <span class=\"sr-only\">(current)</span></a>\n        </li>\n        <li *ngIf=\"authService.loggedInDoctor()\" class [routerLinkActive]=\"['active']\">\n          <a class=\"nav-link\" [routerLink]=\"['/encyclo']\">Encyclopedia<span class=\"sr-only\">(current)</span></a>\n        </li>\n        <li *ngIf=\"authService.loggedInDoctor()\" class [routerLinkActive]=\"['active']\">\n          <a class=\"nav-link\" [routerLink]=\"['/blog']\">Blog<span class=\"sr-only\">(current)</span></a>\n        </li>\n        <!-- <li *ngIf=\"authService.loggedInChemist()\" class [routerLinkActive]=\"['active']\">\n          <a class=\"nav-link\" [routerLink]=\"['/changeprice']\">Change Price<span class=\"sr-only\">(current)</span></a>\n        </li> -->\n        <li *ngIf=\"authService.loggedIn()\" class [routerLinkActive]=\"['active']\">\n          <a class=\"nav-link\" [routerLink]=\"['/viewprescriptionpat']\">View Prescription<span class=\"sr-only\">(current)</span></a>\n        </li>\n        <li *ngIf=\"authService.loggedInChemist()\" class [routerLinkActive]=\"['active']\">\n          <a class=\"nav-link\" [routerLink]=\"['/changemate']\">Material Price<span class=\"sr-only\">(current)</span></a>\n        </li>\n        <li *ngIf=\"authService.loggedInDoctor()\" class [routerLinkActive]=\"['active']\">\n          <a class=\"nav-link\" [routerLink]=\"['/disease']\">Add Disease Information<span class=\"sr-only\">(current)</span></a>\n        </li>\n        <li *ngIf=\"authService.loggedInDoctor()\" class [routerLinkActive]=\"['active']\">\n          <a class=\"nav-link\" [routerLink]=\"['/drug']\">Add Drug Informatoin<span class=\"sr-only\">(current)</span></a>\n        </li>\n        <li *ngIf=\"authService.loggedIn() || authService.loggedInChemist() || authService.loggedInDoctor()\" class [routerLinkActive]=\"['active']\">\n          <a class=\"nav-link\" [routerLink]=\"['/profile']\">Profile<span class=\"sr-only\">(current)</span></a>\n        </li>\n        <li *ngIf=\"!authService.loggedIn() && !authService.loggedInChemist() && !authService.loggedInDoctor()\" class [routerLinkActive]=\"['active']\">\n            <a class=\"nav-link\" [routerLink]=\"['/login']\">Login Patient<span class=\"sr-only\">(current)</span></a>\n          </li>\n          <li *ngIf=\"!authService.loggedIn() && !authService.loggedInChemist() && !authService.loggedInDoctor()\" class [routerLinkActive]=\"['active']\">\n            <a class=\"nav-link\" [routerLink]=\"['/loginchemist']\">Login Chemist<span class=\"sr-only\">(current)</span></a>\n          </li>\n          <li *ngIf=\"!authService.loggedIn() && !authService.loggedInChemist() && !authService.loggedInDoctor()\" class [routerLinkActive]=\"['active']\">\n            <a class=\"nav-link\" [routerLink]=\"['/logindoctor']\">Login Doctor<span class=\"sr-only\">(current)</span></a>\n          </li>\n        <li *ngIf=\"!authService.loggedIn() && !authService.loggedInChemist() && !authService.loggedInDoctor()\" class [routerLinkActive]=\"['active']\">\n            <a class=\"nav-link\" [routerLink]=\"['/register']\">Register Patient <span class=\"sr-only\">(current)</span></a>\n        </li>\n        <li *ngIf=\"!authService.loggedIn() && !authService.loggedInChemist() && !authService.loggedInDoctor()\" class [routerLinkActive]=\"['active']\">\n          <a class=\"nav-link\" [routerLink]=\"['/registerdoctor']\">Register Doctor<span class=\"sr-only\">(current)</span></a>\n      </li>\n      <li *ngIf=\"!authService.loggedIn() && !authService.loggedInChemist() && !authService.loggedInDoctor()\" class [routerLinkActive]=\"['active']\">\n        <a class=\"nav-link\" [routerLink]=\"['/registerchemist']\">Register Chemist<span class=\"sr-only\">(current)</span></a>\n    </li>\n    <!-- <li *ngIf=\"authService.loggedInChemist()\" class [routerLinkActive]=\"['active']\">\n      <a class=\"nav-link\" [routerLink]=\"['/addprescription']\">Add Prescription<span class=\"sr-only\">(current)</span></a>\n    </li> -->\n    <li *ngIf=\"authService.loggedInDoctor()\" class [routerLinkActive]=\"['active']\">\n      <a class=\"nav-link\" [routerLink]=\"['/addprescriptionmat']\">Add  MAT Prescription<span class=\"sr-only\">(current)</span></a>\n    </li>\n    <!-- <li *ngIf=\"authService.loggedInChemist()\" class [routerLinkActive]=\"['active']\">\n      <a class=\"nav-link\" [routerLink]=\"['/addfinal']\">Final Prescription<span class=\"sr-only\">(current)</span></a>\n    </li> -->\n\n    <li *ngIf=\"authService.loggedInChemist()\" class [routerLinkActive]=\"['active']\">\n      <a class=\"nav-link\" [routerLink]=\"['/graph']\">Graph<span class=\"sr-only\">(current)</span></a>\n    </li>\n    <li *ngIf=\"authService.loggedInChemist()\" class [routerLinkActive]=\"['active']\">\n      <a class=\"nav-link\" [routerLink]=\"['/viewprescription']\">View Prescription<span class=\"sr-only\">(current)</span></a>\n    </li>\n   \n\n        <li *ngIf=\"authService.loggedIn() || authService.loggedInChemist() || authService.loggedInDoctor()\"  class>\n          <a class=\"nav-link\" (click)=\"onLogoutClick()\" href=\"#\">Logout <span class=\"sr-only\">(current)</span></a>\n      </li>\n        \n      </ul>\n    </div>\n  </nav>","import { Component, OnInit,ViewChild,ElementRef } from '@angular/core';\nimport *as jsPDF from 'jspdf'\n@Component({\n  selector: 'app-pdf',\n  templateUrl: './pdf.component.html',\n  styleUrls: ['./pdf.component.css']\n})\nexport class PdfComponent implements OnInit {\n  @ViewChild('content') content:ElementRef;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  public downloadpdf(){\n    console.log(\"PDF WORKS\");\n    let doc=new jsPDF();\n\n    let specialElementHandlers={\n      '#editor':function(element,renderer){\n        return true;\n      }\n    };\n\n    let content=this.content.nativeElement;\n    doc.fromHTML(content.innerHTML,15,15,{\n      'width':190,\n      'elementHandlers':specialElementHandlers\n    });\n\n    doc.save('tst.pdf')\n\n  }\n\n}\n","<body bgcolor=\"cyan\">\n<div id=\"content\" #content>\n    ITM Universe\n</div>\n\n<button (click)=\"downloadpdf()\">Download pdf</button>\n</body>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport{Router} from '@angular/router';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\n\nexport class ProfileComponent implements OnInit {\n  user;\n  constructor( private authService:AuthService,\n    private router:Router) { }\n\n  ngOnInit() {\n    this.authService.getProfileDoctor().subscribe(profile=>{\n      this.user=profile.user;\n      //console.log(this.user);\n    },\n    err=>{\n      console.log(err);\n      return false;\n      \n    });\n  }\n\n}\n","<div *ngIf=\"user\">\n    <h2 class=\"page-header\">{{user.name}}</h2>\n    <ul class=\"list-group\">\n        <li class=\"list-group-item\">Username:{{user.username}}</li>\n        <li class=\"list-group-item\">Email:{{user.email}}</li>\n        <li class=\"list-group-item\">Email:{{user._id}}</li>\n    </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { ActivatedRoute } from '@angular/router';\n@Component({\n  selector: 'app-publicprof',\n  templateUrl: './publicprof.component.html',\n  styleUrls: ['./publicprof.component.css']\n})\nexport class PublicprofComponent implements OnInit {\n  currentUrl;\n  username;\n  email;\n  foundProfile = false;\n  messageClass;\n  message;\n  user;\n  constructor(private authService: AuthService,\n    private activatedRoute: ActivatedRoute) { }\n\n  ngOnInit(): void {\n\n    \n    this.currentUrl = this.activatedRoute.snapshot.params; // Get URL parameters on page load\n    // Service to get the public profile data\n\n\n    this.authService.getProfileDoctorbyname(this.currentUrl.username).subscribe(profile=>{\n      this.user=profile.user;\n      //console.log(this.user);\n    },\n    err=>{\n      console.log(err);\n      return false;\n      \n    });\n\n\n\n  }\n\n}\n","<div *ngIf=\"user\">\n  <h2 class=\"page-header\">{{user.name}}</h2>\n  <ul class=\"list-group\">\n      <li class=\"list-group-item\">Username:{{user.username}}</li>\n      <li class=\"list-group-item\">Email:{{user.email}}</li>\n      <li class=\"list-group-item\">Email:{{user._id}}</li>\n  </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ValidateService } from 'src/app/services/validate.service';\n\nimport {FlashMessagesService} from 'angular2-flash-messages';\nimport { AuthService } from 'src/app/services/auth.service';\n\nimport{Router} from '@angular/router';\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  name:string;\n  username:string;\n  email:string;\n  password:string;\n  \n  constructor(private ValidateService:ValidateService,\n    private flashMessage:FlashMessagesService,\n    private authService:AuthService,\n    private router:Router) { \n\n  }\n\n  ngOnInit(): void {\n\n\n  }\n\n\n  onRegisterSubmit(){\n    const user={\n      name:this.name,\n      username:this.username,\n      email:this.email,\n      password:this.password\n    }\n\n\n    if(!this.ValidateService.validateRegister(user)){\n      this.flashMessage.show(\"Please Fill in All The Fields\",{cssClass:'alert-danger',timeout:3000});\n      return false;\n    }\n\n    if(!this.ValidateService.validateEmail(user.email)){\n      this.flashMessage.show(\"Please Use A Valid Email Address\",{cssClass:'alert-danger',timeout:3000});\n      return false;\n    } \n\n    //Register USER\n\n    this.authService.registerUser(user).subscribe(data=>{\n      if(data.success){\n        this.flashMessage.show(\"You are now Registered and can log in\",{cssClass:'alert-success',timeout:3000});\n        this.router.navigate(['/login']);\n      }\n      else{\n\n        this.flashMessage.show(data.msg,{cssClass:'alert-danger',timeout:3000});\n        this.router.navigate(['/register']);\n      }\n    });\n\n\n\n  }\n\n}\n","<form (submit)=\"onRegisterSubmit()\">\n    <fieldset>\n      <legend>Registration For Patient</legend>\n      <div class=\"form-group\">\n        <label for=\"exampleTextarea\">Name</label>\n        <input type=\"text\" [(ngModel)]=\"name\" name=\"name\" class=\"form-control\" placeholder=\"Enter Your Name\">\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"exampleTextarea\">Username</label>\n        <input type=\"text\" [(ngModel)]=\"username\" name=\"username\" class=\"form-control\" placeholder=\"Enter UserName\">\n        \n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Email address</label>\n        <input type=\"email\" [(ngModel)]=\"email\" name=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\">\n        <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"exampleInputPassword1\">Password</label>\n        <input type=\"password\" [(ngModel)]=\"password\" name=\"password\"class=\"form-control\" id=\"password\" placeholder=\"Password\">\n      </div>\n      \n     \n      \n      <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </fieldset>\n  </form>","import { Component, OnInit } from '@angular/core';\nimport { ValidateService } from 'src/app/services/validate.service';\n\nimport {FlashMessagesService} from 'angular2-flash-messages';\nimport { AuthService } from 'src/app/services/auth.service';\n\nimport{Router} from '@angular/router';\n\n@Component({\n  selector: 'app-registerchemist',\n  templateUrl: './registerchemist.component.html',\n  styleUrls: ['./registerchemist.component.css']\n})\nexport class RegisterchemistComponent implements OnInit {\n  name:string;\n  username:string;\n  email:string;\n  password:string;\n\n  constructor(private ValidateService:ValidateService,\n    private flashMessage:FlashMessagesService,\n    private authService:AuthService,\n    private router:Router) { }\n\n  ngOnInit(): void {\n  }\n  onRegisterSubmit(){\n    const user={\n      name:this.name,\n      username:this.username,\n      email:this.email,\n      password:this.password\n    }\n\n\n    if(!this.ValidateService.validateRegister(user)){\n      this.flashMessage.show(\"Please Fill in All The Fields\",{cssClass:'alert-danger',timeout:3000});\n      return false;\n    }\n\n    if(!this.ValidateService.validateEmail(user.email)){\n      this.flashMessage.show(\"Please Use A Valid Email Address\",{cssClass:'alert-danger',timeout:3000});\n      return false;\n    } \n\n    //Register CHEMIST\n\n    this.authService.registerChemist(user).subscribe(data=>{\n      if(data.success){\n        this.flashMessage.show(\"You are now Registered and can log in\",{cssClass:'alert-success',timeout:3000});\n        this.router.navigate(['/loginchemist']);\n      }\n      else{\n\n        this.flashMessage.show(data.msg,{cssClass:'alert-danger',timeout:3000});\n        this.router.navigate(['/registerchemist']);\n      }\n    });\n\n\n\n  }\n\n}\n","<form (submit)=\"onRegisterSubmit()\">\n    <fieldset>\n      <legend>Registration For Chemist</legend>\n      <div class=\"form-group\">\n        <label for=\"exampleTextarea\">Name</label>\n        <input type=\"text\" [(ngModel)]=\"name\" name=\"name\" class=\"form-control\" placeholder=\"Enter Your Name\">\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"exampleTextarea\">Username</label>\n        <input type=\"text\" [(ngModel)]=\"username\" name=\"username\" class=\"form-control\" placeholder=\"Enter UserName\">\n        \n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Email address</label>\n        <input type=\"email\" [(ngModel)]=\"email\" name=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\">\n        <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"exampleInputPassword1\">Password</label>\n        <input type=\"password\" [(ngModel)]=\"password\" name=\"password\"class=\"form-control\" id=\"password\" placeholder=\"Password\">\n      </div>\n      \n     \n      \n      <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </fieldset>\n  </form>","import { Component, OnInit } from '@angular/core';\nimport { ValidateService } from 'src/app/services/validate.service';\n\nimport {FlashMessagesService} from 'angular2-flash-messages';\nimport { AuthService } from 'src/app/services/auth.service';\n\nimport{Router} from '@angular/router';\n\n@Component({\n  selector: 'app-registerdoctor',\n  templateUrl: './registerdoctor.component.html',\n  styleUrls: ['./registerdoctor.component.css']\n})\nexport class RegisterdoctorComponent implements OnInit {\n  name:string;\n  username:string;\n  email:string;\n  password:string;\n\n  constructor(private ValidateService:ValidateService,\n    private flashMessage:FlashMessagesService,\n    private authService:AuthService,\n    private router:Router) { }\n\n  ngOnInit(): void {\n  }\n  onRegisterSubmit(){\n    const user={\n      name:this.name,\n      username:this.username,\n      email:this.email,\n      password:this.password\n    }\n\n\n    if(!this.ValidateService.validateRegister(user)){\n      this.flashMessage.show(\"Please Fill in All The Fields\",{cssClass:'alert-danger',timeout:3000});\n      return false;\n    }\n\n    if(!this.ValidateService.validateEmail(user.email)){\n      this.flashMessage.show(\"Please Use A Valid Email Address\",{cssClass:'alert-danger',timeout:3000});\n      return false;\n    } \n\n    //Register DOCTOR\n\n    this.authService.registerDoctor(user).subscribe(data=>{\n      if(data.success){\n        this.flashMessage.show(\"You are now Registered and can log in\",{cssClass:'alert-success',timeout:3000});\n        this.router.navigate(['/logindoctor']);\n      }\n      else{\n\n        this.flashMessage.show(data.msg,{cssClass:'alert-danger',timeout:3000});\n        this.router.navigate(['/registerdoctor']);\n      }\n    });\n\n\n\n  }\n\n}\n","<form (submit)=\"onRegisterSubmit()\">\n    <fieldset>\n      <legend>Registration For Doctor</legend>\n      <div class=\"form-group\">\n        <label for=\"exampleTextarea\">Name</label>\n        <input type=\"text\" [(ngModel)]=\"name\" name=\"name\" class=\"form-control\" placeholder=\"Enter Your Name\">\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"exampleTextarea\">Username</label>\n        <input type=\"text\" [(ngModel)]=\"username\" name=\"username\" class=\"form-control\" placeholder=\"Enter UserName\">\n        \n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">Email address</label>\n        <input type=\"email\" [(ngModel)]=\"email\" name=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\">\n        <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"exampleInputPassword1\">Password</label>\n        <input type=\"password\" [(ngModel)]=\"password\" name=\"password\"class=\"form-control\" id=\"password\" placeholder=\"Password\">\n      </div>\n      \n     \n      \n      <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </fieldset>\n  </form>","import { Component, OnInit } from '@angular/core';\nimport {TransferService} from '../../services/transfer.service';\n@Component({\n  selector: 'app-viewfull',\n  templateUrl: './viewfull.component.html',\n  styleUrls: ['./viewfull.component.css']\n})\nexport class ViewfullComponent implements OnInit {\n  data=this.transferService.getData();\n  constructor(private transferService:TransferService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>viewfull works!</p>\nUsername:{{data.username}}<br>\nMedicine:{{data.medname}}<br>\nbreakfast:{{data.breakfast}}<br>\nlunch:{{data.lunch}}<br>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport{Router} from '@angular/router';\nimport {TransferService} from '../../services/transfer.service'\nimport {FlashMessagesService} from 'angular2-flash-messages';\nimport {Globals} from '../../services/glob';\n@Component({\n  selector: 'app-viewpreforpatient',\n  templateUrl: './viewpreforpatient.component.html',\n  styleUrls: ['./viewpreforpatient.component.css']\n \n})\nexport class ViewpreforpatientComponent implements OnInit {\n  uname:string=this.globals.uname;\n  prescription:Prescription[];\n  constructor(private authService:AuthService,\n    private router:Router,\n    private transferService:TransferService,private flashMessage:FlashMessagesService,\n    private globals: Globals) { }\n\n  ngOnInit(): void {\n    const obj={uname:this.uname}\n  \n    this.authService.viewPrescriptionpat(obj).subscribe(prescription=>{\n      if(prescription.success==false){\n        this.flashMessage.show(prescription.msg,{cssClass:'alert-danger',timeout:5000});\n        //this.router.navigate(['home']);\n        \n      }\n      else{\n        this.prescription=prescription;\n      }\n    });\n  }\n  \n\n  /*\n  Submit()\n  {\n    const obj={uname:this.uname}\n  \n    this.authService.viewPrescriptionpat(obj).subscribe(prescription=>{\n      if(prescription.success==false){\n        this.flashMessage.show(prescription.msg,{cssClass:'alert-danger',timeout:5000});\n        //this.router.navigate(['home']);\n        \n      }\n      else{\n        this.prescription=prescription;\n      }\n    });\n  }\n*/\ncheckout(i)\n{\n  this.transferService.setData(this.prescription[i]);\n\n  this.router.navigate(['viewfull']);\n}\n}\ninterface Prescription{\n  medname:string[],\n    breakfast:string[],\n    lunch:string[],\n    username:string\n    \n}","<p>viewpreforpatient works!</p>\nPATIENT USERNAME:{{uname}}\n\n<br>\n\n<div >\n    \n    <ul class=\"list-group\">\n        \n        <li class=\"list-group-item\" *ngFor=\"let pre of prescription; index as i\" >Medicines:{{pre.medname}}<br>Breakfast:{{pre.breakfast}}\n        \n            <button class=\"btn btn-default\"  type=\"button\" (click)=\"checkout(i)\">Select</button>\n        \n        </li>\n    </ul>   \n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport{Router} from '@angular/router';\nimport {TransferService} from '../../services/transfer.service'\nimport {FlashMessagesService} from 'angular2-flash-messages';\n@Component({\n  selector: 'app-viewprescription',\n  templateUrl: './viewprescription.component.html',\n  styleUrls: ['./viewprescription.component.css']\n})\nexport class ViewprescriptionComponent implements OnInit {\n\n  uname:string;\n  otp:string;\n  prescription:Prescription[];\n  constructor(private authService:AuthService,\n    private router:Router,\n    private transferService:TransferService,private flashMessage:FlashMessagesService) { }\n   \n  ngOnInit(): void {\n  //  this.authService.viewPrescription(this.uname).subscribe(prescription=>\n    //  this.prescription=prescription);\n      //console.log(this.prescription[1]);\n     \n     \n   \n  }\n  Submit()\n{\n  const obj={uname:this.uname,\n              otp:this.otp\n  }\n\n // this.authService.viewPrescription(obj).subscribe(prescription=>\n  //  this.prescription=prescription);\n    \n\n\n    this.authService.viewPrescription(obj).subscribe(prescription=>{\n      if(prescription.success==false){\n        this.flashMessage.show(prescription.msg,{cssClass:'alert-danger',timeout:5000});\n        //this.router.navigate(['home']);\n        \n      }\n      else{\n        this.prescription=prescription;\n      }\n    });\n      \n}\n  checkout(i){\n  //  console.log(this.prescription[i]);\n    this.transferService.setData(this.prescription[i]);\n\n    this.router.navigate(['checkoutprescription']);\n  }\n\n\n \n\n}\ninterface Prescription{\n  medname:string[],\n    breakfast:string[],\n    lunch:string[],\n    username:string\n    \n}","\nPATIENT USERNAME:\n<input type=\"text\" [(ngModel)]=\"uname\" name=\"uname\" id=\"uname\" placeholder=\"Enter Username\">\n<br>\n<br>\n<br>\nPATIENT OTP:  &nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n    <input type=\"text\" [(ngModel)]=\"otp\" name=\"otp\" id=\"otp\" placeholder=\"Enter OTP\">\n<br><br>\n<button class=\"btn btn-default\" type=\"button\" (click)=\"Submit()\">Submit</button>\n<div >\n    \n    <ul class=\"list-group\">\n        \n        <li class=\"list-group-item\" *ngFor=\"let pre of prescription; index as i\" >USERNAME:{{pre.username}}<br><br>Medicines:{{pre.medname}}<br>Breakfast:{{pre.breakfast}}\n            <button class=\"btn btn-default\"  type=\"button\" (click)=\"checkout(i)\">Select</button>\n        \n        </li>\n    </ul>   \n</div>","import { Component, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Inject} from '@angular/core';\n\nimport {FormControl, Validators} from '@angular/forms';\nimport { EmpService } from 'src/app/services/emp.service';\n@Component({\n  selector: 'app-add',\n  templateUrl: './add.component.html',\n  styleUrls: ['./add.component.css']\n})\nexport class AddComponent implements OnInit {\n\n  constructor(public dialogRef: MatDialogRef<AddComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: Medicineprice,\n    public dataService: EmpService) { }\n\n  ngOnInit(): void {\n  }\n  formControl = new FormControl('', [\n    Validators.required\n    // Validators.email,\n  ]);\n\n  getErrorMessage() {\n    return this.formControl.hasError('required') ? 'Required field' :\n      this.formControl.hasError('email') ? 'Not a valid email' :\n        '';\n  }\n\n  submit() {\n  // emppty stuff\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  public confirmAdd(): void {\n    this.dataService.addIssue(this.data);\n  }\n\n}\n\n\ninterface Medicineprice{\n  medname:string,\n  price:number,\n  quantity:number,\n  id:string\n  \n  }\n","<div class=\"container\">\n    <h3 mat-dialog-title>Add New Medicine</h3>\n  \n    <form class=\"mat-dialog-content\" (ngSubmit)=\"submit\" #formControl=\"ngForm\">\n  \n      <div class=\"form\">\n        <mat-form-field color=\"accent\">\n          <input matInput #input class=\"form-control\" placeholder=\"Id\" [(ngModel)]=\"data.id\" name=\"id\" required >\n          <mat-error *ngIf=\"formControl.invalid\">{{getErrorMessage()}}</mat-error>\n        </mat-form-field>\n      </div>\n  \n      <!--Textarea for demo purposes-->\n      <div class=\"form\">\n        <mat-form-field color=\"accent\">\n          <textarea matInput #input class=\"form-control\" placeholder=\"Medicine Name\" [(ngModel)]=\"data.medname\" name=\"medname\" required ></textarea>\n          <mat-error *ngIf=\"formControl.invalid\">{{getErrorMessage()}}</mat-error>\n        </mat-form-field>\n      </div>\n  \n      <!--Contains mat-hint for characters count and has maxLengt set-->\n      <div class=\"form\">\n        <mat-form-field color=\"accent\">\n          <input matInput #inputstate class=\"form-control\" placeholder=\"Price\" [(ngModel)]=\"data.price\" name=\"state\" maxlength=\"10\" required >\n          <mat-error *ngIf=\"formControl.invalid\">{{getErrorMessage()}}</mat-error>\n          <mat-hint align=\"end\">{{inputstate.value?.length || 0}}/10</mat-hint>\n        </mat-form-field>\n      </div>\n  \n       <!--Contains mat-hint for characters count and has maxLengt set-->\n       <div class=\"form\">\n        <mat-form-field color=\"accent\">\n          <input matInput #inputstate class=\"form-control\" placeholder=\"Quantity\" [(ngModel)]=\"data.quantity\" name=\"state\" maxlength=\"10\" required >\n          <mat-error *ngIf=\"formControl.invalid\">{{getErrorMessage()}}</mat-error>\n          <mat-hint align=\"end\">{{inputstate.value?.length || 0}}/10</mat-hint>\n        </mat-form-field>\n      </div>\n  \n      <div mat-dialog-actions>\n        <button mat-button [type]=\"submit\" [disabled]=\"!formControl.valid\" [mat-dialog-close]=\"1\" (click)=\"confirmAdd()\">Save</button>\n        <button mat-button (click)=\"onNoClick()\" tabindex=\"-1\">Cancel</button>\n      </div>\n    </form>\n  </div>","import { Component, OnInit ,Inject} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport{EmpService} from '../../services/emp.service';\n@Component({\n  selector: 'app-delete',\n  templateUrl: './delete.component.html',\n  styleUrls: ['./delete.component.css']\n})\nexport class DeleteComponent implements OnInit {\n\n  constructor(public dialogRef: MatDialogRef<DeleteComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any, public dataService: EmpService) { }\n\n  ngOnInit(): void {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  confirmDelete(): void {\n    this.dataService.deleteIssue(this.data);\n  }\n}\n","<div class=\"container\">\n    <h3 mat-dialog-title>Are you sure?</h3>\n    <div mat-dialog-content>\n      Id: {{data.id}}\n      <p></p>\n      Medicine Name: {{data.medname}}\n      <p></p>\n      Price: {{data.price}}\n     \n    </div>\n  \n    <div mat-dialog-actions>\n      <button mat-button [mat-dialog-close]=\"1\" (click)=\"confirmDelete()\">Delete</button>\n      <button mat-button (click)=\"onNoClick()\" tabindex=\"-1\">Cancel</button>\n    </div>\n  </div>\n  <br>\n  © 2020 ITM App","import { Component,Inject } from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {AuthService} from '../../services/auth.service';\nimport{EmpService} from '../../services/emp.service';\n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})\nexport class EditComponent {\n\n  constructor(public empService:EmpService,\n    public authService:AuthService,\n    public dialogRef: MatDialogRef<EditComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any) {}\n\n    formControl = new FormControl('', [\n      Validators.required\n      // Validators.email,\n    ]);\n\n    getErrorMessage() {\n      return this.formControl.hasError('required') ? 'Required field' :\n        this.formControl.hasError('email') ? 'Not a valid email' :\n          '';\n    }\n  \n    submit() {\n      // emppty stuff\n    }\n  \n    onNoClick(): void {\n      this.dialogRef.close();\n    }\n  \n    stopEdit() {\n    \n      this.empService.updateIssue(this.data);\n\n\n\n      /*\n      this.authService.saveeditedmed(this.data).subscribe(data=>{\n        if(data.success){\n         \n        }\n        else{\n  \n    \n        }\n      });\n        */\n  \n  \n    }\n\n\n}\n","<div class=\"container\">\n    <h3 mat-dialog-title>Issue id: {{data.id}}</h3>\n  \n    <form class=\"mat-dialog-content\" (ngSubmit)=\"submit\" #formControl=\"ngForm\">\n  \n      <div class=\"form\">\n        <mat-form-field color=\"accent\">\n          <input matInput #input class=\"form-control\" placeholder=\"Id\" [(ngModel)]=\"data.id\" name=\"id\" required >\n          <mat-error *ngIf=\"formControl.invalid\">{{getErrorMessage()}}</mat-error>\n        </mat-form-field>\n      </div>\n  \n      \n  \n      <div class=\"form\">\n          <mat-form-field color=\"accent\">\n            <input matInput placeholder=\"Medicine Name\" [(ngModel)]=\"data.medname\" name=\"medname\">\n          </mat-form-field>\n      </div>\n  \n      <div class=\"form\">\n        <mat-form-field color=\"accent\">\n          <input matInput placeholder=\"Price\" [(ngModel)]=\"data.price\" name=\"price\">\n        </mat-form-field>\n      </div>\n\n      <div class=\"form\">\n        <mat-form-field color=\"accent\">\n          <input matInput placeholder=\"Quantity\" [(ngModel)]=\"data.quantity\" name=\"quantity\">\n        </mat-form-field>\n      </div>\n  \n  \n      <div mat-dialog-actions>\n        <button mat-button [type]=\"submit\" [disabled]=\"!formControl.valid\" [mat-dialog-close]=\"1\" (click)=\"stopEdit()\">Save</button>\n        <button mat-button (click)=\"onNoClick()\" tabindex=\"-1\">Cancel</button>\n      </div>\n    </form>\n  </div>","import {Injectable} from '@angular/core';\r\nimport {Router,CanActivate} from '@angular/router';\r\nimport {AuthService} from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate{\r\n    constructor(private authService:AuthService,\r\n        private router:Router){\r\n\r\n    }\r\n\r\n    canActivate(){\r\n        if(this.authService.loggedIn()){\r\n            return true;\r\n        }\r\n        else{\r\n            this.router.navigate(['/']);\r\n            return false;\r\n        }\r\n    }\r\n\r\n   \r\n}","import {Injectable} from '@angular/core';\r\nimport {Router,CanActivate} from '@angular/router';\r\nimport {AuthService} from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthGuardChemist implements CanActivate{\r\n    constructor(private authService:AuthService,\r\n        private router:Router){\r\n\r\n    }\r\n\r\n    canActivate(){\r\n        if(this.authService.loggedInChemist()){\r\n            return true;\r\n        }\r\n        else{\r\n            this.router.navigate(['/']);\r\n            return false;\r\n        }\r\n    }\r\n\r\n   \r\n}","import {Injectable} from '@angular/core';\nimport {Router,CanActivate} from '@angular/router';\nimport {AuthService} from '../services/auth.service';\n\n@Injectable()\nexport class AuthGuardDoctor implements CanActivate{\n    constructor(private authService:AuthService,\n        private router:Router){\n\n    }\n\n    canActivate(){\n        if(this.authService.loggedInDoctor()){\n            return true;\n        }\n        else{\n            this.router.navigate(['/']);\n            return false;\n        }\n    }\n\n   \n}","import { Injectable } from '@angular/core';\nimport {Http,Headers,RequestOptions} from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport {tokenNotExpired} from 'angular2-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class AuthService {\n\n  authToken:any;\n  user:any;\n\n\n  options;\n  constructor(private http:Http) { }\n\n  registerUser(user){\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/register',user,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n\n  }\n  //reg for doc\n  registerDoctor(user){\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/registerdoctor',user,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n\n  }\n  //reg for chemist\n  registerChemist(user){\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/registerchemist',user,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n\n  }\n\n  authenticateUser(user){\n\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/authenticate',user,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n\n  }\n\n\n  //auth for doc\n  authenticateDoctor(user){  \n\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/authenticatedoctor',user,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n\n  }\n\n  //auth for chemist\n  //auth for doc\n  authenticateChemist(user){  \n\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/authenticatechemist',user,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n\n  }\n\n\n  getProfile(){\n    let headers=new Headers();\n    this.loadToken();\n    headers.append('Authorization',this.authToken);\n    headers.append('Content-Type','application/json');\n    return this.http.get('/api/users/profile',{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n  }\n\n  getProfileChemist(){\n    let headers=new Headers();\n    this.loadTokenChemist();\n    headers.append('Authorization',this.authToken);\n    headers.append('Content-Type','application/json');\n    return this.http.get('/api/users/profile',{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n  }\n\n  getProfileDoctor(){\n   \n    let headers=new Headers();\n    this.loadTokenDoctor();\n    headers.append('Authorization',this.authToken);\n    headers.append('Content-Type','application/json');\n    return this.http.get('/api/users/profile',{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n   \n  }\n\n\n  storeUserData(token, user) {\n    localStorage.setItem('id_token',token);\n    localStorage.setItem('user',JSON.stringify(user));\n    this.authToken=token;\n    this.user=user;\n\n  }\n\n  //store login details of chemist in local storage\n\n  storeChemistData(token, user) {\n    localStorage.setItem('id_tokenchemist',token);\n    localStorage.setItem('user',JSON.stringify(user));\n    this.authToken=token;\n    this.user=user;\n\n  }\n  //store login details of doctor in local storage\n\n  storeDoctorData(token, user) {\n    localStorage.setItem('id_tokendoctor',token);\n    localStorage.setItem('user',JSON.stringify(user));\n    this.authToken=token;\n    this.user=user;\n\n  }\n\n  loadToken(){\n    const token=localStorage.getItem('id_token');\n    this.authToken=token;\n  }\n\n  //load chemist token\n  loadTokenChemist(){\n    const token=localStorage.getItem('id_tokenchemist');\n    this.authToken=token;\n  }\n\n  //load doctor token\n  loadTokenDoctor(){\n    const token=localStorage.getItem('id_tokendoctor');\n    this.authToken=token;\n  }\n\n \n\n  //for authentication guard\n  //to check if we are logged so that /login,/register can be disabled\n  loggedIn(){\n    return tokenNotExpired('id_token');\n  }\n\n  //log in status for chemist\n  loggedInChemist(){\n    return tokenNotExpired('id_tokenchemist');\n  }\n\n  //log in status for doctor\n  //log in status for chemist\n  loggedInDoctor(){\n    return tokenNotExpired('id_tokendoctor');\n  }\n\n\n  logout(){\n    this.authToken=null;\n    this.user=null;\n    localStorage.clear();\n  }\n\n\n\n  //function for adding prescirption to database\n  addPrescription(prescirption){\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/addprescription',prescirption,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n  }\n\n  viewPrescription(obj){         \n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/viewprescription',obj,{headers:headers})\n    .map(res=>res.json());\n    \n  }\n\n  //for patient presciprtin viewing\n  viewPrescriptionpat(obj){         \n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/viewprescriptionpat',obj,{headers:headers})\n    .map(res=>res.json());\n    \n  }\n\n  /*\n  viewPrescription(){         //backup \n    \n    return this.http.get('/api/users/viewprescription')\n    .map(res=>res.json());\n    \n  }\n  */\n\n  viewMedicinePrice(medname){\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/viewprice',medname,{headers:headers})\n    .map(res=>res.json());\n  }\n\n  //to store drug in database\n  registerDrug(drug){\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/registerdrug',drug,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n\n  }\n\n  viewDrugs(){\n    return this.http.get('/api/users/viewdrugs')\n    .map(res=>res.json());\n    \n  }\n\n  //to register disease in database\n  registerDisease(disease){\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/registerdisease',disease,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n\n  }\n\n  viewDiseases(){\n    \n    return this.http.get('/api/users/viewdiseases')\n    .map(res=>res.json());\n    \n  }\n\n  viewAllMedicinePrice(){\n  \n    return this.http.get('/api/users/viewallprice')\n    .map(res=>res.json());\n  }\n\n  saveeditedmed(medobj){\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/editmed',medobj,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n  }\n\n  //below is for dispalying too\n  saveeditedmed2(medobj){\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/editmed2',medobj,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n  }\n\n  // Function to get public profile data\n  getPublicProfile(username) {\n    this.createAuthenticationHeaders(); // Create headers before sending to /api\n    return this.http.get('/api/users/publicProfile/' + username, this.options).map(res => res.json());\n  }\n\n   // Function to create headers, add token, to be used in HTTP requests\n   createAuthenticationHeaders() {\n    this.loadToken(); // Get token so it can be attached to headers\n    // Headers configuration options\n    this.options = new RequestOptions({\n      headers: new Headers({\n        'Content-Type': 'application/json', // Format set to JSON\n        'authorization': this.authToken // Attach token\n      })\n    });\n  }\n\n  getProfileDoctorbyname(username){\n    this.createAuthenticationHeaders(); // Create headers before sending to /api\n    return this.http.get('/api/users/publicProfile1/' + username, this.options).map(res => res.json());\n  }\n\n  getDoctormed(did){\n   \n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/getdoctormed',did,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n  }\n\n\n  getDoctordisname(){\n    return this.http.get('/api/users/getdoctordis')\n    .map(res=>res.json());\n    \n  }\n\n  getDoctordisid(){\n    return this.http.get('/api/users/getdoctordisid')\n    .map(res=>res.json());\n    \n  }\n\n  addPrescription2(prescirption){\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/addprescription2',prescirption,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n  }\n\n  getDoctordAllmed(){\n    \n    return this.http.get('/api/users/getdoctorallmed')\n    .map(res=>res.json());\n    \n  }\n\n  updatequant(medobj){\n    let headers=new Headers();\n    headers.append('Content-Type','application/json');\n    return this.http.post('/api/users/updquant',medobj,{headers:headers})\n    .map(res=>res.json()); //observable so we use .map\n  }\n\n  getgraph()\n  {\n    return this.http.get('/api/users/graph')\n    .map(res=>res.json());\n  }\n  getgraph2()\n  {\n    return this.http.get('/api/users/graph2')\n    .map(res=>res.json());\n  }\n\n\n\n\n}\n","import { Injectable } from '@angular/core';\nimport {AuthService} from '../services/auth.service';\nimport { Http, Headers, RequestOptions } from '@angular/http';\n@Injectable({\n  providedIn: 'root'\n})\nexport class BlogserviceService {\n  options;\n  domain = '/api';\n\n  constructor(private authService: AuthService,\n    private http: Http) { }\n\n\n    createAuthenticationHeaders() {\n      this.authService.loadTokenDoctor(); // Get token so it can be attached to headers\n      // Headers configuration options\n      this.options = new RequestOptions({\n        headers: new Headers({\n          'Content-Type': 'application/json', // Format set to JSON\n          'Authorization': this.authService.authToken // Attach token\n        })\n      });\n    }\n    // Function to create a new blog post\n    newBlog(blog) {\n    this.createAuthenticationHeaders(); // Create headers\n    return this.http.post('/api/users/newBlog', blog, this.options).map(res => res.json());\n  }\n\n  // Function to get all blogs from the database\n  getAllBlogs() {\n    this.createAuthenticationHeaders(); // Create headers\n    return this.http.get('/api/users/allBlogs', this.options).map(res => res.json());\n  }\n\n  // Function to get the blog using the id\n  getSingleBlog(id) {\n    this.createAuthenticationHeaders(); // Create headers\n    return this.http.get('/api/users/singleBlog/'+ id, this.options).map(res => res.json());\n  }\n\n  // Function to edit/update blog post\n  editBlog(blog) {\n    this.createAuthenticationHeaders(); // Create headers\n    return this.http.put('/api/users/updateBlog/', blog, this.options).map(res => res.json());\n  }\n\n   // Function to delete a blog\n   deleteBlog(id) {\n    this.createAuthenticationHeaders(); // Create headers\n    return this.http.delete('/api/users/deleteBlog/'+ id, this.options).map(res => res.json());\n  }\n\n\n  // Function to like a blog post\n  likeBlog(id) {\n    //const blogData = { id: id,uname:\"doc2\"};\n    \n    return this.http.put('/api/users/likeBlog/', id, this.options).map(res => res.json());\n  }\n\n  // Function to dislike a blog post\n  dislikeBlog(id) {\n    //const blogData = { id: id };\n    return this.http.put('/api/users/dislikeBlog/', id, this.options).map(res => res.json());\n  }\n\n  // Function to post a comment on a blog post\n  postComment(data) {\n    \n    this.createAuthenticationHeaders(); // Create headers\n \n    return this.http.post('/api/users/comment/', data, this.options).map(res => res.json());\n\n  }\n\n\n\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {BehaviorSubject} from 'rxjs'; \nimport {FlashMessagesService} from 'angular2-flash-messages';\nimport { ToastrService } from 'ngx-toastr';\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmpService {\n  dataChange: BehaviorSubject<Medicineprice[]> = new BehaviorSubject<Medicineprice[]>([]);\n  dialogData: any;\n  //;\n  constructor(private http: HttpClient,\n    private toastr: ToastrService) { }\n\n  \n  getAllIssues():void {  \n    this.http.get<Medicineprice[]>('/api/users/viewallprice').subscribe(data=>{\n      this.dataChange.next(data);\n    },\n    (error: HttpErrorResponse) => {\n      console.log (error.name + ' ' + error.message);\n      });\n    }\n\n    get data(): Medicineprice[] {\n      return this.dataChange.value;\n    }\n  \n    getDialogData() {\n      return this.dialogData;\n    }\n    addIssue (issue: Medicineprice): void {\n      this.http.post('/api/users/adddrug2',issue).subscribe(data => {\n        this.dialogData = data;});\n        this.toastr.success('Successfully Added');\n    }\n  \n    updateIssue (issue: Medicineprice): void {\n      this.http.post('/api/users/editmed2',issue).subscribe(data => {\n        this.dialogData = data;\n       // this.flashMessage.show('Successfully edited', 3000);\n        this.toastr.success('Successfully added');\n      },\n      (err: HttpErrorResponse) => {\n        //this.flashMessage.show('Error occurred. Details: ' + err.name + ' ' + err.message, 8000);\n      }\n    );\n    }\n  \n    deleteIssue (issue: Medicineprice): void {\n    // console.log(id);\n      this.http.post('/api/users/deldrug2',issue).subscribe(data => {\n        this.toastr.warning('Successfully deleted');\n      \n      });\n\n    }\n\n\n}\n\ninterface Medicineprice{\n  medname:string,\n  price:number,\n  quantity:number,\n  id:string\n  \n  }\n  interface Meddel\n  {\n    id:number\n  }\n\n","import { Injectable } from '@angular/core';\n\nInjectable()\nexport class Globals{\n    uname:string;\n\n    set(obj){\n        this.uname=obj;\n    }\n\n    get(){\n        return this.uname;\n    }\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransferService {\n\n  constructor() { }\n\n\n  private data;\n\n  setData(data){\n    this.data = data;\n  }\n\n  getData(){\n    let temp = this.data;\n    this.clearData();\n    return temp;\n  }\n\n  clearData(){\n    this.data = undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidateService {\n\n  constructor() { }\n    validateRegister(user){\n      if(user.name==undefined || user.username==undefined || user.email==undefined || user.password==undefined){\n        return false;\n      }\n      else{\n        return true;\n      }\n    }\n\n      validateEmail(email){\n        var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return re.test(email);\n          \n      \n      }\n\n\n\n}\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}